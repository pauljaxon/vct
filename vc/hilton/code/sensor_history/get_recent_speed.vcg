           *******************************************************
                       Semantic Analysis of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:43.97

                 procedure sensor_history.Get_Recent_Speed




For path(s) from start to run-time check associated with statement of line 110:

procedure_get_recent_speed_1.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
        ->
C1:    fld_new_idx(item) >= history_count__first .
C2:    fld_new_idx(item) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 110:

procedure_get_recent_speed_2.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    fld_new_idx(item) >= history_count__first .
H9:    fld_new_idx(item) <= history_count__last .
H10:   previous_item(fld_new_idx(item)) >= history_count__first .
H11:   previous_item(fld_new_idx(item)) <= history_count__last .
        ->
C1:    previous_item(fld_new_idx(item)) >= history_count__first .
C2:    previous_item(fld_new_idx(item)) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 111:

procedure_get_recent_speed_3.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    fld_new_idx(item) >= history_count__first .
H9:    fld_new_idx(item) <= history_count__last .
H10:   previous_item(fld_new_idx(item)) >= history_count__first .
H11:   previous_item(fld_new_idx(item)) <= history_count__last .
H12:   previous_item(fld_new_idx(item)) >= history_count__first .
H13:   previous_item(fld_new_idx(item)) <= history_count__last .
H14:   previous_item(fld_new_idx(item)) >= history_count__first .
H15:   previous_item(fld_new_idx(item)) <= history_count__last .
        ->
C1:    element(fld_speed(item), [previous_item(fld_new_idx(
           item))]) >= meter_per_sec__first .
C2:    element(fld_speed(item), [previous_item(fld_new_idx(
           item))]) <= meter_per_sec__last .
C3:    previous_item(fld_new_idx(item)) >= history_count__first .
C4:    previous_item(fld_new_idx(item)) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 112:

procedure_get_recent_speed_4.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    fld_new_idx(item) >= history_count__first .
H9:    fld_new_idx(item) <= history_count__last .
H10:   previous_item(fld_new_idx(item)) >= history_count__first .
H11:   previous_item(fld_new_idx(item)) <= history_count__last .
H12:   previous_item(fld_new_idx(item)) >= history_count__first .
H13:   previous_item(fld_new_idx(item)) <= history_count__last .
H14:   previous_item(fld_new_idx(item)) >= history_count__first .
H15:   previous_item(fld_new_idx(item)) <= history_count__last .
H16:   element(fld_speed(item), [previous_item(fld_new_idx(
           item))]) >= meter_per_sec__first .
H17:   element(fld_speed(item), [previous_item(fld_new_idx(
           item))]) <= meter_per_sec__last .
H18:   previous_item(fld_new_idx(item)) >= history_count__first .
H19:   previous_item(fld_new_idx(item)) <= history_count__last .
H20:   previous_item(fld_new_idx(item)) >= history_count__first .
H21:   previous_item(fld_new_idx(item)) <= history_count__last .
        ->
C1:    element(fld_times(item), [previous_item(fld_new_idx(
           item))]) >= clock__millisecond__first .
C2:    element(fld_times(item), [previous_item(fld_new_idx(
           item))]) <= clock__millisecond__last .
C3:    previous_item(fld_new_idx(item)) >= history_count__first .
C4:    previous_item(fld_new_idx(item)) <= history_count__last .
 

For path(s) from start to finish:

procedure_get_recent_speed_5.
*** true .          /* trivially true VC removed by Examiner */


