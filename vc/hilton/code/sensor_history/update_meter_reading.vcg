           *******************************************************
                       Semantic Analysis of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:43.90

               procedure sensor_history.Update_Meter_Reading




For path(s) from start to run-time check associated with statement of line 63:

procedure_update_meter_reading_1.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
        ->
C1:    t__1 >= clock__millisecond__first .
C2:    t__1 <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 66:

procedure_update_meter_reading_2.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   t_valid__1 .
H17:   t__1 >= clock__millisecond__first .
H18:   t__1 <= clock__millisecond__last .
        ->
C1:    t__1 >= clock__millisecond__first .
C2:    t__1 <= clock__millisecond__last .
C3:    fld_new_idx(item) >= history_count__first .
C4:    fld_new_idx(item) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 68:

procedure_update_meter_reading_3.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   not t_valid__1 .
        ->
C1:    0 >= clock__millisecond__first .
C2:    0 <= clock__millisecond__last .
C3:    fld_new_idx(item) >= history_count__first .
C4:    fld_new_idx(item) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 70:

procedure_update_meter_reading_4.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   t_valid__1 .
H17:   t__1 >= clock__millisecond__first .
H18:   t__1 <= clock__millisecond__last .
H19:   t__1 >= clock__millisecond__first .
H20:   t__1 <= clock__millisecond__last .
H21:   fld_new_idx(item) >= history_count__first .
H22:   fld_new_idx(item) <= history_count__last .
        ->
C1:    data >= measuretypes__meter__first .
C2:    data <= measuretypes__meter__last .
C3:    fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) >= history_count__first .
C4:    fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) <= history_count__last .
 

procedure_update_meter_reading_5.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   not t_valid__1 .
H17:   0 >= clock__millisecond__first .
H18:   0 <= clock__millisecond__last .
H19:   fld_new_idx(item) >= history_count__first .
H20:   fld_new_idx(item) <= history_count__last .
        ->
C1:    data >= measuretypes__meter__first .
C2:    data <= measuretypes__meter__last .
C3:    fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) >= history_count__first .
C4:    fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) <= history_count__last .
 

For path(s) from start to run-time check associated with statement of line 71:

procedure_update_meter_reading_6.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   t_valid__1 .
H17:   t__1 >= clock__millisecond__first .
H18:   t__1 <= clock__millisecond__last .
H19:   t__1 >= clock__millisecond__first .
H20:   t__1 <= clock__millisecond__last .
H21:   fld_new_idx(item) >= history_count__first .
H22:   fld_new_idx(item) <= history_count__last .
H23:   data >= measuretypes__meter__first .
H24:   data <= measuretypes__meter__last .
H25:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) >= history_count__first .
H26:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) <= history_count__last .
        ->
C1:    fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))), [fld_new_idx(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)))], 
           data))) >= history_count__first .
C2:    fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))), [fld_new_idx(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)))], 
           data))) <= history_count__last .
 

procedure_update_meter_reading_7.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   not t_valid__1 .
H17:   0 >= clock__millisecond__first .
H18:   0 <= clock__millisecond__last .
H19:   fld_new_idx(item) >= history_count__first .
H20:   fld_new_idx(item) <= history_count__last .
H21:   data >= measuretypes__meter__first .
H22:   data <= measuretypes__meter__last .
H23:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) >= history_count__first .
H24:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) <= history_count__last .
        ->
C1:    fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))), [fld_new_idx(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)))], data))) >= 
           history_count__first .
C2:    fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))), [fld_new_idx(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)))], data))) <= 
           history_count__last .
 

For path(s) from start to run-time check associated with statement of line 71:

procedure_update_meter_reading_8.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   t_valid__1 .
H17:   t__1 >= clock__millisecond__first .
H18:   t__1 <= clock__millisecond__last .
H19:   t__1 >= clock__millisecond__first .
H20:   t__1 <= clock__millisecond__last .
H21:   fld_new_idx(item) >= history_count__first .
H22:   fld_new_idx(item) <= history_count__last .
H23:   data >= measuretypes__meter__first .
H24:   data <= measuretypes__meter__last .
H25:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) >= history_count__first .
H26:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))) <= history_count__last .
H27:   fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))), [fld_new_idx(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)))], 
           data))) >= history_count__first .
H28:   fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], t__1))), [fld_new_idx(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)))], 
           data))) <= history_count__last .
H29:   next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], t__1)))], 
           data)))) >= history_count__first .
H30:   next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], t__1)))], 
           data)))) <= history_count__last .
        ->
C1:    next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], t__1)))], 
           data)))) >= history_count__first .
C2:    next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], t__1)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], t__1))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], t__1)))], 
           data)))) <= history_count__last .
 

procedure_update_meter_reading_9.
H1:    true .
H2:    fld_new_idx(item) >= history_count__first .
H3:    fld_new_idx(item) <= history_count__last .
H4:    for_all(i___4: history_count, ((i___4 >= 
           history_count__first) and (i___4 <= 
           history_count__last)) -> ((element(fld_times(
           item), [i___4]) >= clock__millisecond__first) and (element(
           fld_times(item), [i___4]) <= clock__millisecond__last))) .
H5:    for_all(i___3: history_count, ((i___3 >= 
           history_count__first) and (i___3 <= 
           history_count__last)) -> ((element(fld_speed(
           item), [i___3]) >= meter_per_sec__first) and (element(
           fld_speed(item), [i___3]) <= meter_per_sec__last))) .
H6:    for_all(i___2: history_count, ((i___2 >= 
           history_count__first) and (i___2 <= 
           history_count__last)) -> ((element(fld_bearing(
           item), [i___2]) >= angle_degrees__first) and (element(
           fld_bearing(item), [i___2]) <= angle_degrees__last))) .
H7:    for_all(i___1: history_count, ((i___1 >= 
           history_count__first) and (i___1 <= 
           history_count__last)) -> ((element(fld_distance(
           item), [i___1]) >= measuretypes__meter__first) and (element(
           fld_distance(item), [i___1]) <= 
           measuretypes__meter__last))) .
H8:    data >= meter__first .
H9:    data <= meter__last .
H10:   t__1 >= clock__millisecond__first .
H11:   t__1 <= clock__millisecond__last .
H12:   true .
H13:   t__1 >= clock__millisecond__first .
H14:   t__1 <= clock__millisecond__last .
H15:   true .
H16:   not t_valid__1 .
H17:   0 >= clock__millisecond__first .
H18:   0 <= clock__millisecond__last .
H19:   fld_new_idx(item) >= history_count__first .
H20:   fld_new_idx(item) <= history_count__last .
H21:   data >= measuretypes__meter__first .
H22:   data <= measuretypes__meter__last .
H23:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) >= history_count__first .
H24:   fld_new_idx(upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))) <= history_count__last .
H25:   fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))), [fld_new_idx(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)))], data))) >= 
           history_count__first .
H26:   fld_new_idx(upf_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)), update(fld_distance(
           upf_times(item, update(fld_times(item), [fld_new_idx(
           item)], 0))), [fld_new_idx(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0)))], data))) <= 
           history_count__last .
H27:   next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], 0)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], 0)))], 
           data)))) >= history_count__first .
H28:   next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], 0)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], 0)))], 
           data)))) <= history_count__last .
        ->
C1:    next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], 0)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], 0)))], 
           data)))) >= history_count__first .
C2:    next_item(fld_new_idx(upf_distance(upf_times(item, update(
           fld_times(item), [fld_new_idx(item)], 0)), update(
           fld_distance(upf_times(item, update(fld_times(
           item), [fld_new_idx(item)], 0))), [fld_new_idx(upf_times(
           item, update(fld_times(item), [fld_new_idx(item)], 0)))], 
           data)))) <= history_count__last .
 

For path(s) from start to finish:

procedure_update_meter_reading_10.
*** true .          /* trivially true VC removed by Examiner */


procedure_update_meter_reading_11.
*** true .          /* trivially true VC removed by Examiner */


