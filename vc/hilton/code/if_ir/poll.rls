           /*********************************************************/
                           /*Proof Rule Declarations*/
 /*SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331*/
      /*Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 25-NOV-2009 14:04:42.36*/

                            /*procedure if_ir.Poll*/


rule_family poll_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

poll_rules(1): bus_id may_be_replaced_by bc1553__infrared.
poll_rules(2): integer__size >= 0 may_be_deduced.
poll_rules(3): integer__first may_be_replaced_by -2147483648.
poll_rules(4): integer__last may_be_replaced_by 2147483647.
poll_rules(5): integer__base__first may_be_replaced_by -2147483648.
poll_rules(6): integer__base__last may_be_replaced_by 2147483647.
poll_rules(7): systemtypes__unsigned16__size >= 0 may_be_deduced.
poll_rules(8): systemtypes__unsigned16__first may_be_replaced_by 0.
poll_rules(9): systemtypes__unsigned16__last may_be_replaced_by 65535.
poll_rules(10): systemtypes__unsigned16__base__first may_be_replaced_by -2147483648.
poll_rules(11): systemtypes__unsigned16__base__last may_be_replaced_by 2147483647.
poll_rules(12): state_types__word__size >= 0 may_be_deduced.
poll_rules(13): state_types__word__first may_be_replaced_by 0.
poll_rules(14): state_types__word__last may_be_replaced_by 65535.
poll_rules(15): state_types__word__base__first may_be_replaced_by -2147483648.
poll_rules(16): state_types__word__base__last may_be_replaced_by 2147483647.
poll_rules(17): state_types__infrared__size >= 0 may_be_deduced.
poll_rules(18): state_types__infrared__first may_be_replaced_by state_types__ir_inactive.
poll_rules(19): state_types__infrared__last may_be_replaced_by state_types__ir_sweep.
poll_rules(20): state_types__infrared__base__first may_be_replaced_by state_types__ir_inactive.
poll_rules(21): state_types__infrared__base__last may_be_replaced_by state_types__ir_sweep.
poll_rules(22): state_types__infrared__pos(state_types__infrared__first) may_be_replaced_by 0.
poll_rules(23): state_types__infrared__pos(
     state_types__ir_inactive) may_be_replaced_by 0.
poll_rules(24): state_types__infrared__val(0) may_be_replaced_by 
     state_types__ir_inactive.
poll_rules(25): state_types__infrared__pos(state_types__ir_stare) may_be_replaced_by 1.
poll_rules(26): state_types__infrared__val(1) may_be_replaced_by 
     state_types__ir_stare.
poll_rules(27): state_types__infrared__pos(state_types__ir_sweep) may_be_replaced_by 2.
poll_rules(28): state_types__infrared__val(2) may_be_replaced_by 
     state_types__ir_sweep.
poll_rules(29): state_types__infrared__pos(state_types__infrared__last) may_be_replaced_by 2.
poll_rules(30): state_types__infrared__pos(succ(X)) may_be_replaced_by 
     state_types__infrared__pos(X) + 1
     if [X <=state_types__ir_sweep, X <> state_types__ir_sweep].
poll_rules(31): state_types__infrared__pos(pred(X)) may_be_replaced_by 
     state_types__infrared__pos(X) - 1
     if [X >=state_types__ir_inactive, X <> 
     state_types__ir_inactive].
poll_rules(32): state_types__infrared__pos(X) >= 0 may_be_deduced_from
     [state_types__ir_inactive <= X, X <= state_types__ir_sweep].
poll_rules(33): state_types__infrared__pos(X) <= 2 may_be_deduced_from
     [state_types__ir_inactive <= X, X <= state_types__ir_sweep].
poll_rules(34): state_types__infrared__val(X) >= 
     state_types__ir_inactive may_be_deduced_from
     [0 <= X, X <= 2].
poll_rules(35): state_types__infrared__val(X) <= 
     state_types__ir_sweep may_be_deduced_from
     [0 <= X, X <= 2].
poll_rules(36): succ(state_types__infrared__val(X)) may_be_replaced_by 
     state_types__infrared__val(X+1)
     if [0 <= X, X < 2].
poll_rules(37): pred(state_types__infrared__val(X)) may_be_replaced_by 
     state_types__infrared__val(X-1)
     if [0 < X, X <= 2].
poll_rules(38): state_types__infrared__pos(state_types__infrared__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 2].
poll_rules(39): state_types__infrared__val(state_types__infrared__pos(X)) may_be_replaced_by X
     if [state_types__ir_inactive <= X, X <= 
     state_types__ir_sweep].
poll_rules(40): state_types__infrared__pos(X) <= 
     state_types__infrared__pos(Y) & X <= Y are_interchangeable 
     if [state_types__ir_inactive <= X, X <= 
     state_types__ir_sweep, state_types__ir_inactive <= Y, Y <= 
     state_types__ir_sweep].
poll_rules(41): state_types__infrared__val(X) <= 
     state_types__infrared__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 2, 0 <= Y, Y <= 2].
poll_rules(42): measuretypes__kelvin__size >= 0 may_be_deduced.
poll_rules(43): measuretypes__kelvin__first may_be_replaced_by 0.
poll_rules(44): measuretypes__kelvin__last may_be_replaced_by 6000.
poll_rules(45): measuretypes__kelvin__base__first may_be_replaced_by -2147483648.
poll_rules(46): measuretypes__kelvin__base__last may_be_replaced_by 2147483647.
poll_rules(47): measuretypes__bit_range__size >= 0 may_be_deduced.
poll_rules(48): measuretypes__bit_range__first may_be_replaced_by 0.
poll_rules(49): measuretypes__bit_range__last may_be_replaced_by 255.
poll_rules(50): measuretypes__bit_range__base__first <= 
     measuretypes__bit_range__base__last may_be_deduced.
poll_rules(51): measuretypes__bit_range__base__first <= 
     measuretypes__bit_range__first may_be_deduced.
poll_rules(52): measuretypes__bit_range__base__last >= 
     measuretypes__bit_range__last may_be_deduced.
poll_rules(53): measuretypes__bit4_range__size >= 0 may_be_deduced.
poll_rules(54): measuretypes__bit4_range__first may_be_replaced_by 0.
poll_rules(55): measuretypes__bit4_range__last may_be_replaced_by 3.
poll_rules(56): measuretypes__bit4_range__base__first <= 
     measuretypes__bit4_range__base__last may_be_deduced.
poll_rules(57): measuretypes__bit4_range__base__first <= 
     measuretypes__bit4_range__first may_be_deduced.
poll_rules(58): measuretypes__bit4_range__base__last >= 
     measuretypes__bit4_range__last may_be_deduced.
poll_rules(59): bus__word_index__size >= 0 may_be_deduced.
poll_rules(60): bus__word_index__first may_be_replaced_by 1.
poll_rules(61): bus__word_index__last may_be_replaced_by 31.
poll_rules(62): bus__word_index__base__first <= bus__word_index__base__last may_be_deduced.
poll_rules(63): bus__word_index__base__first <= bus__word_index__first may_be_deduced.
poll_rules(64): bus__word_index__base__last >= bus__word_index__last may_be_deduced.
poll_rules(65): bus__word__size >= 0 may_be_deduced.
poll_rules(66): bus__word__first may_be_replaced_by 0.
poll_rules(67): bus__word__last may_be_replaced_by 65535.
poll_rules(68): bus__word__base__first may_be_replaced_by -2147483648.
poll_rules(69): bus__word__base__last may_be_replaced_by 2147483647.
poll_rules(70): bus__all_msg_index__size >= 0 may_be_deduced.
poll_rules(71): bus__all_msg_index__first may_be_replaced_by 0.
poll_rules(72): bus__all_msg_index__last may_be_replaced_by 63.
poll_rules(73): bus__all_msg_index__base__first may_be_replaced_by -32768.
poll_rules(74): bus__all_msg_index__base__last may_be_replaced_by 32767.
poll_rules(75): bus__lru_subaddress_index__size >= 0 may_be_deduced.
poll_rules(76): bus__lru_subaddress_index__first may_be_replaced_by 1.
poll_rules(77): bus__lru_subaddress_index__last may_be_replaced_by 8.
poll_rules(78): bus__lru_subaddress_index__base__first may_be_replaced_by -32768.
poll_rules(79): bus__lru_subaddress_index__base__last may_be_replaced_by 32767.
poll_rules(80): bc1553__lru_name__size >= 0 may_be_deduced.
poll_rules(81): bc1553__lru_name__first may_be_replaced_by bc1553__barometer.
poll_rules(82): bc1553__lru_name__last may_be_replaced_by bc1553__warhead.
poll_rules(83): bc1553__lru_name__base__first may_be_replaced_by bc1553__barometer.
poll_rules(84): bc1553__lru_name__base__last may_be_replaced_by bc1553__warhead.
poll_rules(85): bc1553__lru_name__pos(bc1553__lru_name__first) may_be_replaced_by 0.
poll_rules(86): bc1553__lru_name__pos(bc1553__barometer) may_be_replaced_by 0.
poll_rules(87): bc1553__lru_name__val(0) may_be_replaced_by 
     bc1553__barometer.
poll_rules(88): bc1553__lru_name__pos(bc1553__asi) may_be_replaced_by 1.
poll_rules(89): bc1553__lru_name__val(1) may_be_replaced_by 
     bc1553__asi.
poll_rules(90): bc1553__lru_name__pos(bc1553__ins) may_be_replaced_by 2.
poll_rules(91): bc1553__lru_name__val(2) may_be_replaced_by 
     bc1553__ins.
poll_rules(92): bc1553__lru_name__pos(bc1553__compass) may_be_replaced_by 3.
poll_rules(93): bc1553__lru_name__val(3) may_be_replaced_by 
     bc1553__compass.
poll_rules(94): bc1553__lru_name__pos(bc1553__fuel) may_be_replaced_by 4.
poll_rules(95): bc1553__lru_name__val(4) may_be_replaced_by 
     bc1553__fuel.
poll_rules(96): bc1553__lru_name__pos(bc1553__fuze) may_be_replaced_by 5.
poll_rules(97): bc1553__lru_name__val(5) may_be_replaced_by 
     bc1553__fuze.
poll_rules(98): bc1553__lru_name__pos(bc1553__radar) may_be_replaced_by 6.
poll_rules(99): bc1553__lru_name__val(6) may_be_replaced_by 
     bc1553__radar.
poll_rules(100): bc1553__lru_name__pos(bc1553__infrared) may_be_replaced_by 7.
poll_rules(101): bc1553__lru_name__val(7) may_be_replaced_by 
     bc1553__infrared.
poll_rules(102): bc1553__lru_name__pos(bc1553__fins) may_be_replaced_by 8.
poll_rules(103): bc1553__lru_name__val(8) may_be_replaced_by 
     bc1553__fins.
poll_rules(104): bc1553__lru_name__pos(bc1553__motor) may_be_replaced_by 9.
poll_rules(105): bc1553__lru_name__val(9) may_be_replaced_by 
     bc1553__motor.
poll_rules(106): bc1553__lru_name__pos(bc1553__destruct) may_be_replaced_by 10.
poll_rules(107): bc1553__lru_name__val(10) may_be_replaced_by 
     bc1553__destruct.
poll_rules(108): bc1553__lru_name__pos(bc1553__warhead) may_be_replaced_by 11.
poll_rules(109): bc1553__lru_name__val(11) may_be_replaced_by 
     bc1553__warhead.
poll_rules(110): bc1553__lru_name__pos(bc1553__lru_name__last) may_be_replaced_by 11.
poll_rules(111): bc1553__lru_name__pos(succ(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) + 1
     if [X <=bc1553__warhead, X <> bc1553__warhead].
poll_rules(112): bc1553__lru_name__pos(pred(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) - 1
     if [X >=bc1553__barometer, X <> bc1553__barometer].
poll_rules(113): bc1553__lru_name__pos(X) >= 0 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
poll_rules(114): bc1553__lru_name__pos(X) <= 11 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
poll_rules(115): bc1553__lru_name__val(X) >= bc1553__barometer may_be_deduced_from
     [0 <= X, X <= 11].
poll_rules(116): bc1553__lru_name__val(X) <= bc1553__warhead may_be_deduced_from
     [0 <= X, X <= 11].
poll_rules(117): succ(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X+1)
     if [0 <= X, X < 11].
poll_rules(118): pred(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X-1)
     if [0 < X, X <= 11].
poll_rules(119): bc1553__lru_name__pos(bc1553__lru_name__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 11].
poll_rules(120): bc1553__lru_name__val(bc1553__lru_name__pos(X)) may_be_replaced_by X
     if [bc1553__barometer <= X, X <= bc1553__warhead].
poll_rules(121): bc1553__lru_name__pos(X) <= bc1553__lru_name__pos(Y) & X <= Y are_interchangeable 
     if [bc1553__barometer <= X, X <= bc1553__warhead, 
     bc1553__barometer <= Y, Y <= bc1553__warhead].
poll_rules(122): bc1553__lru_name__val(X) <= bc1553__lru_name__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 11, 0 <= Y, Y <= 11].
poll_rules(123): ibit__phase__size >= 0 may_be_deduced.
poll_rules(124): ibit__phase__first may_be_replaced_by ibit__off.
poll_rules(125): ibit__phase__last may_be_replaced_by ibit__timeout.
poll_rules(126): ibit__phase__base__first may_be_replaced_by ibit__off.
poll_rules(127): ibit__phase__base__last may_be_replaced_by ibit__timeout.
poll_rules(128): ibit__phase__pos(ibit__phase__first) may_be_replaced_by 0.
poll_rules(129): ibit__phase__pos(ibit__off) may_be_replaced_by 0.
poll_rules(130): ibit__phase__val(0) may_be_replaced_by ibit__off.
poll_rules(131): ibit__phase__pos(ibit__request_start) may_be_replaced_by 1.
poll_rules(132): ibit__phase__val(1) may_be_replaced_by 
     ibit__request_start.
poll_rules(133): ibit__phase__pos(ibit__in_progress) may_be_replaced_by 2.
poll_rules(134): ibit__phase__val(2) may_be_replaced_by 
     ibit__in_progress.
poll_rules(135): ibit__phase__pos(ibit__request_stop) may_be_replaced_by 3.
poll_rules(136): ibit__phase__val(3) may_be_replaced_by 
     ibit__request_stop.
poll_rules(137): ibit__phase__pos(ibit__pass) may_be_replaced_by 4.
poll_rules(138): ibit__phase__val(4) may_be_replaced_by 
     ibit__pass.
poll_rules(139): ibit__phase__pos(ibit__fail) may_be_replaced_by 5.
poll_rules(140): ibit__phase__val(5) may_be_replaced_by 
     ibit__fail.
poll_rules(141): ibit__phase__pos(ibit__timeout) may_be_replaced_by 6.
poll_rules(142): ibit__phase__val(6) may_be_replaced_by 
     ibit__timeout.
poll_rules(143): ibit__phase__pos(ibit__phase__last) may_be_replaced_by 6.
poll_rules(144): ibit__phase__pos(succ(X)) may_be_replaced_by 
     ibit__phase__pos(X) + 1
     if [X <=ibit__timeout, X <> ibit__timeout].
poll_rules(145): ibit__phase__pos(pred(X)) may_be_replaced_by 
     ibit__phase__pos(X) - 1
     if [X >=ibit__off, X <> ibit__off].
poll_rules(146): ibit__phase__pos(X) >= 0 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
poll_rules(147): ibit__phase__pos(X) <= 6 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
poll_rules(148): ibit__phase__val(X) >= ibit__off may_be_deduced_from
     [0 <= X, X <= 6].
poll_rules(149): ibit__phase__val(X) <= ibit__timeout may_be_deduced_from
     [0 <= X, X <= 6].
poll_rules(150): succ(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X+1)
     if [0 <= X, X < 6].
poll_rules(151): pred(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X-1)
     if [0 < X, X <= 6].
poll_rules(152): ibit__phase__pos(ibit__phase__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 6].
poll_rules(153): ibit__phase__val(ibit__phase__pos(X)) may_be_replaced_by X
     if [ibit__off <= X, X <= ibit__timeout].
poll_rules(154): ibit__phase__pos(X) <= ibit__phase__pos(Y) & X <= Y are_interchangeable 
     if [ibit__off <= X, X <= ibit__timeout, ibit__off <= Y, Y <= 
     ibit__timeout].
poll_rules(155): ibit__phase__val(X) <= ibit__phase__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 6, 0 <= Y, Y <= 6].
poll_rules(156): ir_cfg__sector_range__size >= 0 may_be_deduced.
poll_rules(157): ir_cfg__sector_range__first may_be_replaced_by -12.
poll_rules(158): ir_cfg__sector_range__last may_be_replaced_by 12.
poll_rules(159): ir_cfg__sector_range__base__first <= 
     ir_cfg__sector_range__base__last may_be_deduced.
poll_rules(160): ir_cfg__sector_range__base__first <= 
     ir_cfg__sector_range__first may_be_deduced.
poll_rules(161): ir_cfg__sector_range__base__last >= 
     ir_cfg__sector_range__last may_be_deduced.
poll_rules(162): sector__size >= 0 may_be_deduced.
poll_rules(163): sector__first may_be_replaced_by -12.
poll_rules(164): sector__last may_be_replaced_by 12.
poll_rules(165): sector__base__first <= sector__base__last may_be_deduced.
poll_rules(166): sector__base__first <= sector__first may_be_deduced.
poll_rules(167): sector__base__last >= sector__last may_be_deduced.
poll_rules(168): stare_request__size >= 0 may_be_deduced.
poll_rules(169): A = B may_be_deduced_from
     [goal(checktype(A,stare_request)),
      goal(checktype(B,stare_request)),
      fld_sx(A) = fld_sx(B),
      fld_sy(A) = fld_sy(B),
      fld_fresh_request(A) = fld_fresh_request(B),
      fld_fresh_answer(A) = fld_fresh_answer(B),
      fld_temp(A) = fld_temp(B)].
poll_rules(170): sweep_request__size >= 0 may_be_deduced.
poll_rules(171): A = B may_be_deduced_from
     [goal(checktype(A,sweep_request)),
      goal(checktype(B,sweep_request)),
      fld_sx_start(A) = fld_sx_start(B),
      fld_sx_end(A) = fld_sx_end(B),
      fld_sy_start(A) = fld_sy_start(B),
      fld_sy_end(A) = fld_sy_end(B),
      fld_fresh_request(A) = fld_fresh_request(B),
      fld_fresh_answer(A) = fld_fresh_answer(B),
      fld_grid(A) = fld_grid(B)].
