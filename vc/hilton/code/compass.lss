           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:39.31

Line
   1  -- Compass simulator
   2  --
   3  -- $Log: compass.ads,v $
   4  -- Revision 1.3  2004/12/17 17:51:22  adi
   5  -- Fixed compass angle conversions and checks so that compass.in passes
   6  --
   7  -- Revision 1.2  2004/12/17 16:08:53  adi
   8  -- Fixing errors in compass; renamed Angle to Angle_Degrees for clarity
   9  --
  10  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
  11  -- Added from tarfile
  12  --
  13  --
  14  -- Revision 1.4  2003/08/08 20:29:29  adi
  15  -- Use Angle_Ops public child
  16  --
  17  -- Revision 1.3  2003/08/06 20:37:54  adi
  18  -- Use Bit_Machine
  19  --
  20  -- Revision 1.2  2003/08/05 18:39:22  adi
  21  -- Added read_dxy, read_dyz
  22  --
  23  -- Revision 1.1  2003/08/03 12:47:10  adi
  24  -- Initial revision
  25  --
  26  --
  27  --
  28  with MeasureTypes,Clock,Systemtypes;
  29  use type MeasureTypes.Millirad;
  30  use type Clock.Millisecond;
  31  --# inherit MeasureTypes, Bus, Rt1553,
  32  --#         Clock, Clock_Utils, SystemTypes,
  33  --#         IBIT, Bit_Machine, measuretypes.angle_ops;
  34  package Compass
  35    --# own State;
  36    --# initializes State;
  37  is
  38     -- Type renamings for brevity
  39     subtype Angle_Degrees is Measuretypes.Angle_Degrees;
  40  
  41     -- Cycle the reading of data from the bus
  42     -- and writing of data to the bus
  43     procedure Cycle;
  44     --# global in out State;
  45     --#        in out Clock.Time;
  46     --#        in Bus.Outputs;
  47     --#        in out Bus.Inputs;
  48     --# derives State from *, Bus.Outputs &
  49     --#        Bus.Inputs from *, Clock.Time, State &
  50     --#        Clock.Time from *;
  51  
  52     -- Set the current XY angle
  53     procedure Set_XY(XY : in Angle_Degrees);
  54     --# global in out State, Clock.Time;
  55     --# derives Clock.Time from * &
  56     --#         State from *, Clock.Time, XY;
  57  
  58     -- Set the current XY angle rate of change
  59     procedure Set_dXY(dXY : in Measuretypes.Millirad_Per_Sec);
  60     --# global in out State, Clock.Time;
  61     --# derives Clock.Time from * &
  62     --#         State from *, Clock.Time, dXY;
  63  
  64     -- Read the current XY angle
  65     procedure Read_XY(XY : out Angle_Degrees);
  66     --# global in     State;
  67     --#        in out Clock.Time;
  68     --# derives Clock.Time from * &
  69     --#         XY from State, Clock.Time;
  70  
  71     -- Read the current XY delta
  72     procedure Read_dXY(Delta_angle : out Measuretypes.Millirad_Per_Sec);
  73     --# global in     State;
  74     --# derives Delta_angle from State;
  75  
  76     -- Set the current YZ angle
  77     procedure Set_YZ(YZ : in Angle_Degrees);
  78     --# global in out State, Clock.Time;
  79     --# derives Clock.Time from * &
  80     --#         State from *, Clock.Time, YZ;
  81  
  82     -- Set the current YZ angle rate of change
  83     procedure Set_dYZ(dYZ : in Measuretypes.Millirad_Per_Sec);
  84     --# global in out State, Clock.Time;
  85     --# derives Clock.Time from * &
  86     --#         State from *, Clock.Time, dYZ;
  87  
  88     -- Read the current YZ angle
  89     procedure Read_YZ(YZ : out Angle_Degrees);
  90     --# global in     State;
  91     --#        in out Clock.Time;
  92     --# derives Clock.Time from * &
  93     --#         YZ from State, Clock.Time;
  94  
  95     -- Read the current YZ delta
  96     procedure Read_dYZ(Delta_angle : out Measuretypes.Millirad_Per_Sec);
  97     --# global in     State;
  98     --# derives Delta_angle from State;
  99  
 100     -- Cause the next BIT to fail
 101     procedure Fail_Next_Bit;
 102     --# global in out State;
 103     --# derives State from *;
 104  
 105     procedure Init;
 106     --# global out State;
 107     --#        in out Bus.Inputs;
 108     --# derives State from &
 109     --#         Bus.Inputs from *;
 110  
 111     -- Test stub
 112     procedure Command;
 113     --# derives;
 114  end Compass;
No summarized warnings



--End of file--------------------------------------------------
