           /*********************************************************/
                           /*Proof Rule Declarations*/
 /*SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331*/
      /*Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 25-NOV-2009 14:04:43.39*/

                       /*procedure if_warhead.Set_Stage*/


rule_family set_stage_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

set_stage_rules(1): systemtypes__unsigned16__first <= element(warhead_cfg__state_to_code, [I]) may_be_deduced_from [warhead_cfg__inactive <= I, I <= warhead_cfg__detonated].
set_stage_rules(2): element(warhead_cfg__state_to_code, [I]) <= 
     systemtypes__unsigned16__last may_be_deduced_from [warhead_cfg__inactive <= I, I <= warhead_cfg__detonated].
set_stage_rules(3): bus_id may_be_replaced_by bc1553__warhead.
set_stage_rules(4): integer__size >= 0 may_be_deduced.
set_stage_rules(5): integer__first may_be_replaced_by -2147483648.
set_stage_rules(6): integer__last may_be_replaced_by 2147483647.
set_stage_rules(7): integer__base__first may_be_replaced_by -2147483648.
set_stage_rules(8): integer__base__last may_be_replaced_by 2147483647.
set_stage_rules(9): systemtypes__unsigned16__size >= 0 may_be_deduced.
set_stage_rules(10): systemtypes__unsigned16__first may_be_replaced_by 0.
set_stage_rules(11): systemtypes__unsigned16__last may_be_replaced_by 65535.
set_stage_rules(12): systemtypes__unsigned16__base__first may_be_replaced_by -2147483648.
set_stage_rules(13): systemtypes__unsigned16__base__last may_be_replaced_by 2147483647.
set_stage_rules(14): bus__word_index__size >= 0 may_be_deduced.
set_stage_rules(15): bus__word_index__first may_be_replaced_by 1.
set_stage_rules(16): bus__word_index__last may_be_replaced_by 31.
set_stage_rules(17): bus__word_index__base__first <= 
     bus__word_index__base__last may_be_deduced.
set_stage_rules(18): bus__word_index__base__first <= 
     bus__word_index__first may_be_deduced.
set_stage_rules(19): bus__word_index__base__last >= 
     bus__word_index__last may_be_deduced.
set_stage_rules(20): bus__word__size >= 0 may_be_deduced.
set_stage_rules(21): bus__word__first may_be_replaced_by 0.
set_stage_rules(22): bus__word__last may_be_replaced_by 65535.
set_stage_rules(23): bus__word__base__first may_be_replaced_by -2147483648.
set_stage_rules(24): bus__word__base__last may_be_replaced_by 2147483647.
set_stage_rules(25): bus__all_msg_index__size >= 0 may_be_deduced.
set_stage_rules(26): bus__all_msg_index__first may_be_replaced_by 0.
set_stage_rules(27): bus__all_msg_index__last may_be_replaced_by 63.
set_stage_rules(28): bus__all_msg_index__base__first may_be_replaced_by -32768.
set_stage_rules(29): bus__all_msg_index__base__last may_be_replaced_by 32767.
set_stage_rules(30): bus__lru_subaddress_index__size >= 0 may_be_deduced.
set_stage_rules(31): bus__lru_subaddress_index__first may_be_replaced_by 1.
set_stage_rules(32): bus__lru_subaddress_index__last may_be_replaced_by 8.
set_stage_rules(33): bus__lru_subaddress_index__base__first may_be_replaced_by -32768.
set_stage_rules(34): bus__lru_subaddress_index__base__last may_be_replaced_by 32767.
set_stage_rules(35): bc1553__lru_name__size >= 0 may_be_deduced.
set_stage_rules(36): bc1553__lru_name__first may_be_replaced_by bc1553__barometer.
set_stage_rules(37): bc1553__lru_name__last may_be_replaced_by bc1553__warhead.
set_stage_rules(38): bc1553__lru_name__base__first may_be_replaced_by bc1553__barometer.
set_stage_rules(39): bc1553__lru_name__base__last may_be_replaced_by bc1553__warhead.
set_stage_rules(40): bc1553__lru_name__pos(bc1553__lru_name__first) may_be_replaced_by 0.
set_stage_rules(41): bc1553__lru_name__pos(bc1553__barometer) may_be_replaced_by 0.
set_stage_rules(42): bc1553__lru_name__val(0) may_be_replaced_by 
     bc1553__barometer.
set_stage_rules(43): bc1553__lru_name__pos(bc1553__asi) may_be_replaced_by 1.
set_stage_rules(44): bc1553__lru_name__val(1) may_be_replaced_by 
     bc1553__asi.
set_stage_rules(45): bc1553__lru_name__pos(bc1553__ins) may_be_replaced_by 2.
set_stage_rules(46): bc1553__lru_name__val(2) may_be_replaced_by 
     bc1553__ins.
set_stage_rules(47): bc1553__lru_name__pos(bc1553__compass) may_be_replaced_by 3.
set_stage_rules(48): bc1553__lru_name__val(3) may_be_replaced_by 
     bc1553__compass.
set_stage_rules(49): bc1553__lru_name__pos(bc1553__fuel) may_be_replaced_by 4.
set_stage_rules(50): bc1553__lru_name__val(4) may_be_replaced_by 
     bc1553__fuel.
set_stage_rules(51): bc1553__lru_name__pos(bc1553__fuze) may_be_replaced_by 5.
set_stage_rules(52): bc1553__lru_name__val(5) may_be_replaced_by 
     bc1553__fuze.
set_stage_rules(53): bc1553__lru_name__pos(bc1553__radar) may_be_replaced_by 6.
set_stage_rules(54): bc1553__lru_name__val(6) may_be_replaced_by 
     bc1553__radar.
set_stage_rules(55): bc1553__lru_name__pos(bc1553__infrared) may_be_replaced_by 7.
set_stage_rules(56): bc1553__lru_name__val(7) may_be_replaced_by 
     bc1553__infrared.
set_stage_rules(57): bc1553__lru_name__pos(bc1553__fins) may_be_replaced_by 8.
set_stage_rules(58): bc1553__lru_name__val(8) may_be_replaced_by 
     bc1553__fins.
set_stage_rules(59): bc1553__lru_name__pos(bc1553__motor) may_be_replaced_by 9.
set_stage_rules(60): bc1553__lru_name__val(9) may_be_replaced_by 
     bc1553__motor.
set_stage_rules(61): bc1553__lru_name__pos(bc1553__destruct) may_be_replaced_by 10.
set_stage_rules(62): bc1553__lru_name__val(10) may_be_replaced_by 
     bc1553__destruct.
set_stage_rules(63): bc1553__lru_name__pos(bc1553__warhead) may_be_replaced_by 11.
set_stage_rules(64): bc1553__lru_name__val(11) may_be_replaced_by 
     bc1553__warhead.
set_stage_rules(65): bc1553__lru_name__pos(bc1553__lru_name__last) may_be_replaced_by 11.
set_stage_rules(66): bc1553__lru_name__pos(succ(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) + 1
     if [X <=bc1553__warhead, X <> bc1553__warhead].
set_stage_rules(67): bc1553__lru_name__pos(pred(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) - 1
     if [X >=bc1553__barometer, X <> bc1553__barometer].
set_stage_rules(68): bc1553__lru_name__pos(X) >= 0 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
set_stage_rules(69): bc1553__lru_name__pos(X) <= 11 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
set_stage_rules(70): bc1553__lru_name__val(X) >= 
     bc1553__barometer may_be_deduced_from
     [0 <= X, X <= 11].
set_stage_rules(71): bc1553__lru_name__val(X) <= bc1553__warhead may_be_deduced_from
     [0 <= X, X <= 11].
set_stage_rules(72): succ(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X+1)
     if [0 <= X, X < 11].
set_stage_rules(73): pred(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X-1)
     if [0 < X, X <= 11].
set_stage_rules(74): bc1553__lru_name__pos(bc1553__lru_name__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 11].
set_stage_rules(75): bc1553__lru_name__val(bc1553__lru_name__pos(X)) may_be_replaced_by X
     if [bc1553__barometer <= X, X <= bc1553__warhead].
set_stage_rules(76): bc1553__lru_name__pos(X) <= bc1553__lru_name__pos(Y) & X <= Y are_interchangeable 
     if [bc1553__barometer <= X, X <= bc1553__warhead, 
     bc1553__barometer <= Y, Y <= bc1553__warhead].
set_stage_rules(77): bc1553__lru_name__val(X) <= bc1553__lru_name__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 11, 0 <= Y, Y <= 11].
set_stage_rules(78): warhead_cfg__state__size >= 0 may_be_deduced.
set_stage_rules(79): warhead_cfg__state__first may_be_replaced_by warhead_cfg__inactive.
set_stage_rules(80): warhead_cfg__state__last may_be_replaced_by warhead_cfg__detonated.
set_stage_rules(81): warhead_cfg__state__base__first may_be_replaced_by warhead_cfg__inactive.
set_stage_rules(82): warhead_cfg__state__base__last may_be_replaced_by warhead_cfg__detonated.
set_stage_rules(83): warhead_cfg__state__pos(warhead_cfg__state__first) may_be_replaced_by 0.
set_stage_rules(84): warhead_cfg__state__pos(
     warhead_cfg__inactive) may_be_replaced_by 0.
set_stage_rules(85): warhead_cfg__state__val(0) may_be_replaced_by 
     warhead_cfg__inactive.
set_stage_rules(86): warhead_cfg__state__pos(warhead_cfg__awake) may_be_replaced_by 1.
set_stage_rules(87): warhead_cfg__state__val(1) may_be_replaced_by 
     warhead_cfg__awake.
set_stage_rules(88): warhead_cfg__state__pos(warhead_cfg__armed) may_be_replaced_by 2.
set_stage_rules(89): warhead_cfg__state__val(2) may_be_replaced_by 
     warhead_cfg__armed.
set_stage_rules(90): warhead_cfg__state__pos(warhead_cfg__final) may_be_replaced_by 3.
set_stage_rules(91): warhead_cfg__state__val(3) may_be_replaced_by 
     warhead_cfg__final.
set_stage_rules(92): warhead_cfg__state__pos(
     warhead_cfg__detonated) may_be_replaced_by 4.
set_stage_rules(93): warhead_cfg__state__val(4) may_be_replaced_by 
     warhead_cfg__detonated.
set_stage_rules(94): warhead_cfg__state__pos(warhead_cfg__state__last) may_be_replaced_by 4.
set_stage_rules(95): warhead_cfg__state__pos(succ(X)) may_be_replaced_by 
     warhead_cfg__state__pos(X) + 1
     if [X <=warhead_cfg__detonated, X <> warhead_cfg__detonated].
set_stage_rules(96): warhead_cfg__state__pos(pred(X)) may_be_replaced_by 
     warhead_cfg__state__pos(X) - 1
     if [X >=warhead_cfg__inactive, X <> warhead_cfg__inactive].
set_stage_rules(97): warhead_cfg__state__pos(X) >= 0 may_be_deduced_from
     [warhead_cfg__inactive <= X, X <= warhead_cfg__detonated].
set_stage_rules(98): warhead_cfg__state__pos(X) <= 4 may_be_deduced_from
     [warhead_cfg__inactive <= X, X <= warhead_cfg__detonated].
set_stage_rules(99): warhead_cfg__state__val(X) >= 
     warhead_cfg__inactive may_be_deduced_from
     [0 <= X, X <= 4].
set_stage_rules(100): warhead_cfg__state__val(X) <= 
     warhead_cfg__detonated may_be_deduced_from
     [0 <= X, X <= 4].
set_stage_rules(101): succ(warhead_cfg__state__val(X)) may_be_replaced_by 
     warhead_cfg__state__val(X+1)
     if [0 <= X, X < 4].
set_stage_rules(102): pred(warhead_cfg__state__val(X)) may_be_replaced_by 
     warhead_cfg__state__val(X-1)
     if [0 < X, X <= 4].
set_stage_rules(103): warhead_cfg__state__pos(warhead_cfg__state__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 4].
set_stage_rules(104): warhead_cfg__state__val(warhead_cfg__state__pos(X)) may_be_replaced_by X
     if [warhead_cfg__inactive <= X, X <= warhead_cfg__detonated].
set_stage_rules(105): warhead_cfg__state__pos(X) <= 
     warhead_cfg__state__pos(Y) & X <= Y are_interchangeable 
     if [warhead_cfg__inactive <= X, X <= warhead_cfg__detonated, 
     warhead_cfg__inactive <= Y, Y <= warhead_cfg__detonated].
set_stage_rules(106): warhead_cfg__state__val(X) <= 
     warhead_cfg__state__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 4, 0 <= Y, Y <= 4].
set_stage_rules(107): stage__size >= 0 may_be_deduced.
set_stage_rules(108): stage__first may_be_replaced_by warhead_cfg__inactive.
set_stage_rules(109): stage__last may_be_replaced_by warhead_cfg__detonated.
set_stage_rules(110): stage__base__first may_be_replaced_by warhead_cfg__inactive.
set_stage_rules(111): stage__base__last may_be_replaced_by warhead_cfg__detonated.
