           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:43.85

Line
   1  -- Sensor history type package
   2  --
   3  -- $Log: sensor_history.ads,v $
   4  -- Revision 1.2  2004/12/17 16:08:53  adi
   5  -- Fixing errors in compass; renamed Angle to Angle_Degrees for clarity
   6  --
   7  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
   8  -- Added from tarfile
   9  --
  10  --
  11  -- Revision 1.5  2003/09/13 16:09:30  adi
  12  -- Added rep clauses for types
  13  --
  14  -- Revision 1.4  2003/09/13 15:58:07  adi
  15  -- Added individual types for distance, speed and angle
  16  --
  17  -- Revision 1.3  2003/09/07 18:49:17  adi
  18  -- Made type private
  19  --
  20  -- Revision 1.2  2003/09/07 18:43:06  adi
  21  -- Added reading functions
  22  --
  23  -- Revision 1.1  2003/09/07 18:28:19  adi
  24  -- Initial revision
  25  --
  26  -- Revision 1.1  2003/09/01 19:50:09  adi
  27  -- Initial revision
  28  --
  29  --
  30  
  31  with
  32    measuretypes,
  33    Clock;
  34  --# inherit measuretypes,
  35  --#   clock;
  36  package Sensor_history
  37  is
  38     -- Type size is ceil(log_2(400_000)) = 19 bits
  39     subtype Meter is Measuretypes.Meter;
  40  
  41     -- Type size is ceil(log_2(360)) = 9 bits
  42     subtype Angle_Degrees is Measuretypes.Angle_Degrees;
  43     -- Type size is ceil(log_2(10_000)) = 14 bits
  44     subtype Meter_Per_Sec is Measuretypes.Meter_Per_Sec;
  45  
  46     -- Type size is 2 bits
  47     type History_Count is range 1..4;
  48     --# assert history_count'base is integer;
  49  
  50     -- Type size is 4 x 24 bits = 96 bits
  51     type Time_List is array(History_Count) of Clock.Millisecond;
  52     pragma Pack(Time_List);
  53     for Time_List'Size use 96;
  54  
  55     Blank_Time_List : constant Time_List
  56       := Time_List'(others => 0);
  57  
  58     -- Type size is 4 x 19 = 72 bits, packing min is 80
  59     type Dist_History_list is array(History_Count)
  60       of Measuretypes.Meter;
  61     pragma Pack(Dist_History_List);
  62     for Dist_History_List'Size use 80;
  63  
  64     Blank_dist_list : constant Dist_History_list
  65       := Dist_History_list'(others => 0);
  66  
  67     -- Type size is 80 + 96 + 2 bits = 170 bits <= 22 bytes
  68     type Dist_History is record
  69        distance : Dist_History_List;
  70        Times    : Time_List;
  71        new_Idx  : History_Count;
  72     end record;
  73     for Dist_History'Alignment use 1;
  74     for Dist_History use record
  75        Distance at  0 range 0..79;
  76        Times    at 10 range 0..95;
  77        New_Idx  at 22 range 0..1;
  78     end record;
  79     for Dist_History'Size use 178;
  80  
  81     -- Type size is 4 x 9 = 36 bits
  82     type Angle_History_List is array(History_Count) of Angle_Degrees;
  83     pragma Pack(Angle_History_List);
  84     for Angle_History_List'Size use 36;
  85  
  86     Blank_Angle_List : constant Angle_History_List
  87       := Angle_History_List'(others => 0);
  88  
  89     -- Type size is 36 + 96 + 2 bits = 134 bits
  90     type Angle_History is record
  91        Bearing : Angle_History_List;
  92        Times   : Time_List;
  93        New_Idx : History_Count;
  94     end record;
  95     for Angle_History'Alignment use 1;
  96     for Angle_History use record
  97        Bearing at  0 range 0..35;
  98        Times   at  5 range 0..95;
  99        New_Idx at 17 range 0..1;
 100     end record;
 101     for Angle_History'Size use 138;
 102  
 103     -- Type size is 4 x 14 = 56 bits
 104     type speed_List is array(History_Count) of Meter_Per_Sec;
 105     pragma Pack(Speed_List);
 106     for Speed_List'Size use 56;
 107  
 108     Blank_speed_List : constant speed_List :=
 109       speed_List'(others => 0);
 110  
 111     -- Type size is 56 + 96 + 2 bits = 154 bits
 112     type Speed_History is record
 113        Speed : Speed_List;
 114        Times : Time_List;
 115        New_Idx : History_Count;
 116     end record;
 117     for Speed_History'Alignment use 1;
 118     for Speed_History use record
 119        Speed   at  0 range 0..55;
 120        Times   at  7 range 0..95;
 121        New_Idx at 19 range 0..1;
 122     end record;
 123     for Speed_History'Size use 154;
 124  
 125     type measure_History is private;
 126  
 127     Blank_History : constant Measure_History;
 128  
 129     function Next_Item(H : History_Count)
 130                       return History_Count;
 131  
 132     function Previous_Item(H : History_Count)
 133                           return History_Count;
 134  
 135     -- Accessor functions for the history trackers
 136     procedure Get_Recent_Meter(Item      : in Measure_History;
 137                                Recent    : out Meter;
 138                                Timestamp : out Clock.Millisecond);
 139     --# derives recent, timestamp from item;
 140  
 141     procedure Update_Meter_Reading(item : in out measure_History;
 142                                    Data : in Meter);
 143       --# global in out clock.time;
 144       --# derives item from *, Data, clock.time &
 145       --#         clock.time from *;
 146  
 147  
 148     procedure Update_Angle_Reading(item : in out Measure_History;
 149                                    Data : in     Angle_Degrees);
 150       --# global in out clock.time;
 151       --# derives item from *, Data, clock.time &
 152       --#         clock.time from *;
 153  
 154     procedure Get_Recent_angle(Item      : in Measure_History;
 155                                Recent    : out Angle_Degrees;
 156                                Timestamp : out Clock.Millisecond);
 157     --# derives recent, timestamp from item;
 158  
 159  
 160     procedure Update_Speed_Reading(item : in out measure_History;
 161                                    Data : in Meter_Per_sec);
 162       --# global in out clock.time;
 163       --# derives item from *, Data, clock.time &
 164       --#         clock.time from *;
 165  
 166     procedure Get_Recent_Speed(Item      : in Measure_History;
 167                                Recent    : out Meter_Per_sec;
 168                                Timestamp : out Clock.Millisecond);
 169     --# derives recent, timestamp from item;
 170  
 171  private
 172  
 173     type Measure_History is record
 174        -- One or more of the following will be entered:
 175        distance : Dist_History_List;
 176        Bearing  : Angle_History_List;
 177        Speed    : Speed_List;
 178        -- And these are always used
 179        Times    : Time_List;
 180        new_Idx  : History_Count;
 181     end record;
 182  
 183     Blank_History : constant Measure_history
 184       := Measure_History'(distance => Blank_dist_List,
 185                           Bearing  => Blank_Angle_List,
 186                           Speed    => Blank_Speed_List,
 187                           Times    => Blank_Time_List,
 188                           New_Idx  => History_Count'First);
 189  end Sensor_history;
17 summarized warning(s), comprising:
     4 pragma(s)*
    13 representation clause(s)*
(*Note: the above warnings may affect the validity of the analysis.)



--End of file--------------------------------------------------
