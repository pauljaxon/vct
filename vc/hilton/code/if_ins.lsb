           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:40.38

Line
   1  -- MCU interface to the INS, implementation
   2  --
   3  -- $Log: if_ins.adb,v $
   4  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
   5  -- Added from tarfile
   6  --
   7  --
   8  -- Revision 1.3  2003/09/10 21:04:56  adi
   9  -- Added get_ibit_state
  10  --
  11  -- Revision 1.2  2003/08/17 12:47:00  adi
  12  -- Corrected bit read address
  13  --
  14  -- Revision 1.1  2003/08/12 18:09:19  adi
  15  -- Initial revision
  16  --
  17  --
  18  with Bc1553, bus;
  19  package body If_Ins
  20    --# own State is Last_Position, Last_Valid, Ibit_Request;
  21  is
  22     Last_Position : Cartesian.position := Cartesian.Zero_position;
  23     Last_Valid  : Boolean := False;
  24     Ibit_Request : IBIT.Phase := IBIT.Off;
  25  
  26     Bus_Id : constant Bc1553.Lru_Name := Bc1553.Ins;
  27  
  28     function Get_Ibit_State return Ibit.Phase
  29       --# global ibit_request;
  30     is begin
  31        return Ibit_Request;
  32     end Get_Ibit_State;

+++        Flow analysis of subprogram Get_IBIT_State 
           performed: no errors found.

  33  
  34     -- Find out the current position and its validity
  35     procedure Get_Location(Position : out Cartesian.position;
  36                          Valid  : out Boolean)
  37     --# global in Last_Position, Last_Valid;
  38     --# derives Position from Last_Position, Last_Valid &
  39     --#        Valid from Last_Valid;
  40     is
  41     begin
  42        Valid := Last_Valid;
  43        if Last_Valid then
  44           Position := Last_Position;
  45        else
  46           Position := Cartesian.Zero_position;
  47        end if;
  48     end Get_Location;

+++        Flow analysis of subprogram Get_Location 
           performed: no errors found.

  49  
  50     -- Kick off a ins IBIT
  51     procedure Ibit_Start
  52       --# global in out Bus.Outputs;
  53       --#        out    Ibit_Request;
  54     --# derives Bus.Outputs from * &
  55     --#         Ibit_Request from ;
  56     is
  57        Code : SystemTypes.Byte;
  58     begin
  59        Ibit_Request := IBIT.Request_Start;
  60        Code := IBIT.Phase_Lookup(Ibit_Request);
  61        -- Send it out on 1R at word 1
  62        BC1553.Write_Word(Data => Code,
  63                          Idx =>  1,
  64                          Subaddress_Idx => 1,
  65                          Dest => Bus_id);
  66     end Ibit_Start;

+++        Flow analysis of subprogram Ibit_Start 
           performed: no errors found.

  67  
  68     -- Stop a ins IBIT
  69     procedure Ibit_Stop
  70     --# global in out Bus.Outputs;
  71     --#    out Ibit_Request;
  72     --# derives Bus.Outputs from * &
  73     --#         Ibit_Request from ;
  74     is
  75        Code : SystemTypes.Byte;
  76     begin
  77        Ibit_Request := IBIT.Request_Stop;
  78        Code := IBIT.Phase_Lookup(Ibit_Request);
  79        -- Send it out on 1R at word 1
  80        BC1553.Write_Word(Data => Code,
  81                          Idx =>  1,
  82                          Subaddress_Idx => 1,
  83                          Dest => Bus_id);
  84     end Ibit_Stop;

+++        Flow analysis of subprogram Ibit_Stop performed: 
           no errors found.

  85  
  86     -- Poll the bus and update states
  87     procedure Poll
  88     --# global in out Last_Position, Last_Valid, Ibit_Request;
  89     --#        in Bus.Inputs;
  90     --# derives Last_Position, Last_Valid,
  91     --#         Ibit_Request from *, Bus.Inputs;
  92     is
  93        Word : Bus.Word;
  94  
  95        procedure Get_Coord(I1 : in Bus.Word_Index;
  96                            I2 : in Bus.Word_Index;
  97                            Measure : out Measuretypes.Meter)
  98           --# global in bus.inputs;
  99           --# derives measure from i1,i2, bus.inputs;
 100        is
 101           W1, W2 : Bus.Word;
 102        begin
 103           -- Hi word
 104           Bc1553.Read_Word(Src => Bus_Id,
 105                            Idx => I1,
 106                            Subaddress_Idx => 1,
 107                            Data => W1);
 108           -- lo word
 109           Bc1553.Read_Word(Src => Bus_Id,
 110                            Idx => I2,
 111                            Subaddress_Idx => 1,
 112                            Data => W2);
 113           Measure := Measuretypes.Meter(W2) +
 114             Measuretypes.meter(W1 * 16#10000#);
 115        end Get_Coord;

+++        Flow analysis of subprogram Get_Coord performed: 
           no errors found.

 116     begin
 117        -- Check 1T
 118        if BC1553.Is_Valid(Src => Bus_id,
 119                           Subaddress_Idx => 1) and then
 120          BC1553.Is_Fresh(Src => Bus_id,
 121                          Subaddress_Idx => 1) then
 122           Get_Coord(I1 => 1, I2 => 2, Measure => Last_Position.X);
 123           Get_Coord(I1 => 3, I2 => 4, Measure => Last_Position.Y);
 124           Get_Coord(I1 => 5, I2 => 6, Measure => Last_Position.Z);
 125           Last_Valid := True;
 126           -- 1T word 7 - BIT
 127           BC1553.Read_Word(Src => Bus_id,
 128                            Idx => 7,
 129                            Subaddress_Idx => 1,
 130                            Data => Word);
 131           -- Use the standard state machine to transform
 132           -- our IBIT phase
 133           IBIT.State_Machine(Bus_Data => Word,
 134                              Current_Phase => IBIT_Request);
 135        else
 136           -- Nothing to do
 137           null;
 138        end if;
 139     end Poll;

+++        Flow analysis of subprogram Poll performed: no 
           errors found.

 140  
 141     -- Initialise
 142     procedure Init
 143     --# global out Last_Position, Last_Valid, Ibit_Request;
 144     --#        in out Bus.Outputs;
 145     --# derives Last_Position, Last_Valid, Ibit_Request from &
 146     --#         Bus.Outputs from *;
 147     is begin
 148        Last_Position := Cartesian.Zero_position;
 149        Last_Valid := False;
 150        Ibit_Request := IBIT.Off;
 151        BC1553.Set_Message_Valid(Dest => Bus_id,
 152                                 Subaddress_Idx => 1);
 153     end Init;

+++        Flow analysis of subprogram Init performed: no 
           errors found.

 154  
 155     -- Test point
 156     procedure Command is separate;
 157  
 158  end If_Ins;
No summarized warnings



--End of file--------------------------------------------------
