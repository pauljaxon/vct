           *******************************************************
                       Semantic Analysis of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:41.94

                           procedure ir.Do_Stare




For path(s) from start to run-time check associated with statement of line 71:

procedure_do_stare_1.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
        ->
C1:    v__1 >= random__value__first .
C2:    v__1 <= random__value__last .
 

For path(s) from start to run-time check associated with statement of line 75:

procedure_do_stare_2.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
        ->
C1:    bus_id >= rt1553__lru_name__first .
C2:    bus_id <= rt1553__lru_name__last .
C3:    2 >= bus__lru_subaddress_index__first .
C4:    2 <= bus__lru_subaddress_index__last .
C5:    1 >= bus__word_index__first .
C6:    1 <= bus__word_index__last .
C7:    element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
C8:    element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
C9:    state_types__ir_stare >= state_types__infrared__first .
C10:   state_types__ir_stare <= state_types__infrared__last .
 

For path(s) from start to run-time check associated with statement of line 81:

procedure_do_stare_3.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
H11:   bus_id >= rt1553__lru_name__first .
H12:   bus_id <= rt1553__lru_name__last .
H13:   2 >= bus__lru_subaddress_index__first .
H14:   2 <= bus__lru_subaddress_index__last .
H15:   1 >= bus__word_index__first .
H16:   1 <= bus__word_index__last .
H17:   element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
H18:   element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
H19:   state_types__ir_stare >= state_types__infrared__first .
H20:   state_types__ir_stare <= state_types__infrared__last .
        ->
C1:    fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
C2:    fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
C3:    sy >= sector__first .
C4:    sy <= sector__last .
C5:    sx >= sector__first .
C6:    sx <= sector__last .
 

For path(s) from start to run-time check associated with statement of line 83:

procedure_do_stare_4.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
H11:   bus_id >= rt1553__lru_name__first .
H12:   bus_id <= rt1553__lru_name__last .
H13:   2 >= bus__lru_subaddress_index__first .
H14:   2 <= bus__lru_subaddress_index__last .
H15:   1 >= bus__word_index__first .
H16:   1 <= bus__word_index__last .
H17:   element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
H18:   element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
H19:   state_types__ir_stare >= state_types__infrared__first .
H20:   state_types__ir_stare <= state_types__infrared__last .
H21:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H22:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H23:   sy >= sector__first .
H24:   sy <= sector__last .
H25:   sx >= sector__first .
H26:   sx <= sector__last .
H27:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H28:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H29:   v__1 >= random__value__first .
H30:   v__1 <= random__value__last .
        ->
C1:    fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
C2:    fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
C3:    v__1 mod 10 >= kelvin__first .
C4:    v__1 mod 10 <= kelvin__last .
C5:    v__1 mod 10 >= random__value__base__first .
C6:    v__1 mod 10 <= random__value__base__last .
C7:    10 <> 0 .
 

For path(s) from start to run-time check associated with statement of line 84:

procedure_do_stare_5.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
H11:   bus_id >= rt1553__lru_name__first .
H12:   bus_id <= rt1553__lru_name__last .
H13:   2 >= bus__lru_subaddress_index__first .
H14:   2 <= bus__lru_subaddress_index__last .
H15:   1 >= bus__word_index__first .
H16:   1 <= bus__word_index__last .
H17:   element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
H18:   element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
H19:   state_types__ir_stare >= state_types__infrared__first .
H20:   state_types__ir_stare <= state_types__infrared__last .
H21:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H22:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H23:   sy >= sector__first .
H24:   sy <= sector__last .
H25:   sx >= sector__first .
H26:   sx <= sector__last .
H27:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H28:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H29:   v__1 >= random__value__first .
H30:   v__1 <= random__value__last .
H31:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H32:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
H33:   v__1 mod 10 >= kelvin__first .
H34:   v__1 mod 10 <= kelvin__last .
H35:   v__1 mod 10 >= random__value__base__first .
H36:   v__1 mod 10 <= random__value__base__last .
H37:   10 <> 0 .
H38:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H39:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
        ->
C1:    fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= measuretypes__kelvin__first .
C2:    fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= measuretypes__kelvin__last .
 

For path(s) from start to run-time check associated with statement of line 84:

procedure_do_stare_6.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
H11:   bus_id >= rt1553__lru_name__first .
H12:   bus_id <= rt1553__lru_name__last .
H13:   2 >= bus__lru_subaddress_index__first .
H14:   2 <= bus__lru_subaddress_index__last .
H15:   1 >= bus__word_index__first .
H16:   1 <= bus__word_index__last .
H17:   element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
H18:   element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
H19:   state_types__ir_stare >= state_types__infrared__first .
H20:   state_types__ir_stare <= state_types__infrared__last .
H21:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H22:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H23:   sy >= sector__first .
H24:   sy <= sector__last .
H25:   sx >= sector__first .
H26:   sx <= sector__last .
H27:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H28:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H29:   v__1 >= random__value__first .
H30:   v__1 <= random__value__last .
H31:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H32:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
H33:   v__1 mod 10 >= kelvin__first .
H34:   v__1 mod 10 <= kelvin__last .
H35:   v__1 mod 10 >= random__value__base__first .
H36:   v__1 mod 10 <= random__value__base__last .
H37:   10 <> 0 .
H38:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H39:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
H40:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= measuretypes__kelvin__first .
H41:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= measuretypes__kelvin__last .
H42:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
H43:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
        ->
C1:    measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
C2:    measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
 

For path(s) from start to run-time check associated with statement of line 85:

procedure_do_stare_7.
H1:    true .
H2:    sx >= sector__first .
H3:    sx <= sector__last .
H4:    sy >= sector__first .
H5:    sy <= sector__last .
H6:    for_all(i___2: ir_cfg__sector_range, ((i___2 >= 
           sector__first) and (i___2 <= sector__last)) -> (for_all(
           i___1: ir_cfg__sector_range, ((i___1 >= sector__first) and (
           i___1 <= sector__last)) -> ((fld_temp(element(element(
           detect_points, [i___1]), [i___2])) >= kelvin__first) and (
           fld_temp(element(element(detect_points, [i___1]), [
           i___2])) <= kelvin__last))))) .
H7:    v__1 >= random__value__first .
H8:    v__1 <= random__value__last .
H9:    v__1 >= random__value__first .
H10:   v__1 <= random__value__last .
H11:   bus_id >= rt1553__lru_name__first .
H12:   bus_id <= rt1553__lru_name__last .
H13:   2 >= bus__lru_subaddress_index__first .
H14:   2 <= bus__lru_subaddress_index__last .
H15:   1 >= bus__word_index__first .
H16:   1 <= bus__word_index__last .
H17:   element(state_types__ir_values, [state_types__ir_stare]) >= 
           bus__word__first .
H18:   element(state_types__ir_values, [state_types__ir_stare]) <= 
           bus__word__last .
H19:   state_types__ir_stare >= state_types__infrared__first .
H20:   state_types__ir_stare <= state_types__infrared__last .
H21:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H22:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H23:   sy >= sector__first .
H24:   sy <= sector__last .
H25:   sx >= sector__first .
H26:   sx <= sector__last .
H27:   fld_temp(element(element(detect_points, [sx]), [sy])) >= 
           kelvin__first .
H28:   fld_temp(element(element(detect_points, [sx]), [sy])) <= 
           kelvin__last .
H29:   v__1 >= random__value__first .
H30:   v__1 <= random__value__last .
H31:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H32:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
H33:   v__1 mod 10 >= kelvin__first .
H34:   v__1 mod 10 <= kelvin__last .
H35:   v__1 mod 10 >= random__value__base__first .
H36:   v__1 mod 10 <= random__value__base__last .
H37:   10 <> 0 .
H38:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= kelvin__first .
H39:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= kelvin__last .
H40:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 >= measuretypes__kelvin__first .
H41:   fld_temp(element(element(detect_points, [sx]), [sy])) + v__1 mod 
           10 <= measuretypes__kelvin__last .
H42:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
H43:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
H44:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
H45:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
H46:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
H47:   measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
        ->
C1:    bus_id >= rt1553__lru_name__first .
C2:    bus_id <= rt1553__lru_name__last .
C3:    2 >= bus__lru_subaddress_index__first .
C4:    2 <= bus__lru_subaddress_index__last .
C5:    2 >= bus__word_index__first .
C6:    2 <= bus__word_index__last .
C7:    measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) >= 
           bus__word__first .
C8:    measuretypes__encode__kelvin(fld_temp(element(element(
           detect_points, [sx]), [sy])) + v__1 mod 10) <= 
           bus__word__last .
 

For path(s) from start to finish:

procedure_do_stare_8.
*** true .          /* trivially true VC removed by Examiner */


