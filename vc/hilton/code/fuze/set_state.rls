           /*********************************************************/
                           /*Proof Rule Declarations*/
 /*SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331*/
      /*Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 25-NOV-2009 14:04:40.70*/

                          /*procedure Fuze.Set_state*/


rule_family set_state_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

set_state_rules(1): state_types__fuze__size >= 0 may_be_deduced.
set_state_rules(2): state_types__fuze__first may_be_replaced_by state_types__unarmed.
set_state_rules(3): state_types__fuze__last may_be_replaced_by state_types__timed_out.
set_state_rules(4): state_types__fuze__base__first may_be_replaced_by state_types__unarmed.
set_state_rules(5): state_types__fuze__base__last may_be_replaced_by state_types__timed_out.
set_state_rules(6): state_types__fuze__pos(state_types__fuze__first) may_be_replaced_by 0.
set_state_rules(7): state_types__fuze__pos(state_types__unarmed) may_be_replaced_by 0.
set_state_rules(8): state_types__fuze__val(0) may_be_replaced_by 
     state_types__unarmed.
set_state_rules(9): state_types__fuze__pos(state_types__arming) may_be_replaced_by 1.
set_state_rules(10): state_types__fuze__val(1) may_be_replaced_by 
     state_types__arming.
set_state_rules(11): state_types__fuze__pos(state_types__live) may_be_replaced_by 2.
set_state_rules(12): state_types__fuze__val(2) may_be_replaced_by 
     state_types__live.
set_state_rules(13): state_types__fuze__pos(
     state_types__triggering) may_be_replaced_by 3.
set_state_rules(14): state_types__fuze__val(3) may_be_replaced_by 
     state_types__triggering.
set_state_rules(15): state_types__fuze__pos(
     state_types__timed_out) may_be_replaced_by 4.
set_state_rules(16): state_types__fuze__val(4) may_be_replaced_by 
     state_types__timed_out.
set_state_rules(17): state_types__fuze__pos(state_types__fuze__last) may_be_replaced_by 4.
set_state_rules(18): state_types__fuze__pos(succ(X)) may_be_replaced_by 
     state_types__fuze__pos(X) + 1
     if [X <=state_types__timed_out, X <> state_types__timed_out].
set_state_rules(19): state_types__fuze__pos(pred(X)) may_be_replaced_by 
     state_types__fuze__pos(X) - 1
     if [X >=state_types__unarmed, X <> state_types__unarmed].
set_state_rules(20): state_types__fuze__pos(X) >= 0 may_be_deduced_from
     [state_types__unarmed <= X, X <= state_types__timed_out].
set_state_rules(21): state_types__fuze__pos(X) <= 4 may_be_deduced_from
     [state_types__unarmed <= X, X <= state_types__timed_out].
set_state_rules(22): state_types__fuze__val(X) >= 
     state_types__unarmed may_be_deduced_from
     [0 <= X, X <= 4].
set_state_rules(23): state_types__fuze__val(X) <= 
     state_types__timed_out may_be_deduced_from
     [0 <= X, X <= 4].
set_state_rules(24): succ(state_types__fuze__val(X)) may_be_replaced_by 
     state_types__fuze__val(X+1)
     if [0 <= X, X < 4].
set_state_rules(25): pred(state_types__fuze__val(X)) may_be_replaced_by 
     state_types__fuze__val(X-1)
     if [0 < X, X <= 4].
set_state_rules(26): state_types__fuze__pos(state_types__fuze__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 4].
set_state_rules(27): state_types__fuze__val(state_types__fuze__pos(X)) may_be_replaced_by X
     if [state_types__unarmed <= X, X <= state_types__timed_out].
set_state_rules(28): state_types__fuze__pos(X) <= 
     state_types__fuze__pos(Y) & X <= Y are_interchangeable 
     if [state_types__unarmed <= X, X <= state_types__timed_out, 
     state_types__unarmed <= Y, Y <= state_types__timed_out].
set_state_rules(29): state_types__fuze__val(X) <= 
     state_types__fuze__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 4, 0 <= Y, Y <= 4].
set_state_rules(30): clock__millisecond__size >= 0 may_be_deduced.
set_state_rules(31): clock__millisecond__first may_be_replaced_by 0.
set_state_rules(32): clock__millisecond__last may_be_replaced_by 8640000.
set_state_rules(33): clock__millisecond__base__first may_be_replaced_by -2147483648.
set_state_rules(34): clock__millisecond__base__last may_be_replaced_by 2147483647.
