           *******************************************************
                       Semantic Analysis of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:39.83

                    procedure airspeed.Extrapolate_Speed




For path(s) from start to run-time check associated with statement of line 43:

procedure_extrapolate_speed_1.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
        ->
C1:    time_now__1 >= clock__millisecond__first .
C2:    time_now__1 <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 47:

procedure_extrapolate_speed_2.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not time_valid__1 .
        ->
C1:    0 >= meter_per_sec__first .
C2:    0 <= meter_per_sec__last .
 

For path(s) from start to run-time check associated with statement of line 50:

procedure_extrapolate_speed_3.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
        ->
C1:    time_now__1 >= clock__millisecond__first .
C2:    time_now__1 <= clock__millisecond__last .
C3:    last_time >= clock__millisecond__first .
C4:    last_time <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 50:

procedure_extrapolate_speed_4.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
        ->
C1:    clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
C2:    clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 52:

procedure_extrapolate_speed_5.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_accel < 0 .
        ->
C1:     -last_accel >= clock__millisecond__first .
C2:     -last_accel <= clock__millisecond__last .
C3:     -last_accel >= clock__millisecond__first .
C4:     -last_accel <= clock__millisecond__last .
C5:     -last_accel >= measuretypes__cm_per_sec_2__base__first .
C6:     -last_accel <= measuretypes__cm_per_sec_2__base__last .
 

For path(s) from start to run-time check associated with statement of line 53:

procedure_extrapolate_speed_6.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_accel < 0 .
H26:    -last_accel >= clock__millisecond__first .
H27:    -last_accel <= clock__millisecond__last .
H28:    -last_accel >= clock__millisecond__first .
H29:    -last_accel <= clock__millisecond__last .
H30:    -last_accel >= measuretypes__cm_per_sec_2__base__first .
H31:    -last_accel <= measuretypes__cm_per_sec_2__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_accel >= clock__millisecond__first .
H35:    -last_accel <= clock__millisecond__last .
        ->
C1:     -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) >= 
           meter_per_sec__first .
C2:     -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) <= 
           meter_per_sec__last .
C3:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
C4:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
C5:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= clock__millisecond__base__first .
C6:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= clock__millisecond__base__last .
C7:    100000 <> 0 .
C8:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
C9:    ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
 

For path(s) from start to run-time check associated with statement of line 55:

procedure_extrapolate_speed_7.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_accel < 0) .
        ->
C1:    last_accel >= clock__millisecond__first .
C2:    last_accel <= clock__millisecond__last .
C3:    last_accel >= clock__millisecond__first .
C4:    last_accel <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 56:

procedure_extrapolate_speed_8.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_accel < 0) .
H26:   last_accel >= clock__millisecond__first .
H27:   last_accel <= clock__millisecond__last .
H28:   last_accel >= clock__millisecond__first .
H29:   last_accel <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_accel >= clock__millisecond__first .
H33:   last_accel <= clock__millisecond__last .
        ->
C1:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
C2:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
C3:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
C4:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
C5:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= clock__millisecond__base__first .
C6:    last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= clock__millisecond__base__last .
C7:    100000 <> 0 .
C8:    last_accel * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
C9:    last_accel * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
 

For path(s) from start to run-time check associated with statement of line 58:

procedure_extrapolate_speed_9.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_accel < 0 .
H26:    -last_accel >= clock__millisecond__first .
H27:    -last_accel <= clock__millisecond__last .
H28:    -last_accel >= clock__millisecond__first .
H29:    -last_accel <= clock__millisecond__last .
H30:    -last_accel >= measuretypes__cm_per_sec_2__base__first .
H31:    -last_accel <= measuretypes__cm_per_sec_2__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_accel >= clock__millisecond__first .
H35:    -last_accel <= clock__millisecond__last .
H36:    -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) >= 
           meter_per_sec__first .
H37:    -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) <= 
           meter_per_sec__last .
H38:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
H39:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
H40:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= clock__millisecond__base__first .
H41:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= clock__millisecond__base__last .
H42:   100000 <> 0 .
H43:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
H44:   ( -last_accel) * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
H45:    -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) >= 
           meter_per_sec__first .
H46:    -(( -last_accel) * clock_utils__delta_time(
           last_time, time_now__1) div 100000) <= 
           meter_per_sec__last .
        ->
C1:    last_speed + ( -(( -last_accel) * 
           clock_utils__delta_time(last_time, time_now__1) div 100000)) >= 
           meter_per_sec__first .
C2:    last_speed + ( -(( -last_accel) * 
           clock_utils__delta_time(last_time, time_now__1) div 100000)) <= 
           meter_per_sec__last .
 

procedure_extrapolate_speed_10.
H1:    true .
H2:    last_speed >= meter_per_sec__first .
H3:    last_speed <= meter_per_sec__last .
H4:    last_accel >= cm_per_sec_2__first .
H5:    last_accel <= cm_per_sec_2__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_accel < 0) .
H26:   last_accel >= clock__millisecond__first .
H27:   last_accel <= clock__millisecond__last .
H28:   last_accel >= clock__millisecond__first .
H29:   last_accel <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_accel >= clock__millisecond__first .
H33:   last_accel <= clock__millisecond__last .
H34:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
H35:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
H36:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
H37:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
H38:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= clock__millisecond__base__first .
H39:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= clock__millisecond__base__last .
H40:   100000 <> 0 .
H41:   last_accel * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
H42:   last_accel * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
H43:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 >= meter_per_sec__first .
H44:   last_accel * clock_utils__delta_time(last_time, time_now__1) div 
           100000 <= meter_per_sec__last .
        ->
C1:    last_speed + last_accel * clock_utils__delta_time(
           last_time, time_now__1) div 100000 >= 
           meter_per_sec__first .
C2:    last_speed + last_accel * clock_utils__delta_time(
           last_time, time_now__1) div 100000 <= 
           meter_per_sec__last .
 

For path(s) from start to finish:

procedure_extrapolate_speed_11.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_speed_12.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_speed_13.
*** true .          /* trivially true VC removed by Examiner */


