           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:37.02

Line
   1  -- Lookup functions for component states
   2  --
   3  -- $Log: state_types.adb,v $
   4  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
   5  -- Added from tarfile
   6  --
   7  --
   8  -- Revision 1.3  2003/08/27 20:36:01  adi
   9  -- Added IR components
  10  --
  11  -- Revision 1.2  2003/08/22 18:26:12  adi
  12  -- Added Radar action
  13  --
  14  -- Revision 1.1  2003/08/17 13:52:15  adi
  15  -- Initial revision
  16  --
  17  --
  18  package body State_Types is
  19     function Fuze_Action(Val : Word) return Fuze
  20     is
  21        Act : Fuze;
  22     begin
  23        if Val = Fuze_Values(Unarmed) then
  24           Act := Unarmed;
  25        elsif Val = Fuze_Values(Arming) then
  26           Act := Arming;
  27        elsif Val = Fuze_Values(Live) then
  28           Act := Live;
  29        elsif Val = Fuze_Values(Triggering) then
  30           Act := Triggering;
  31        elsif Val = Fuze_Values(Timed_out) then
  32           Act := Timed_out;
  33        else
  34           -- Default
  35           Act := Unarmed;
  36        end if;
  37        return Act;
  38     end Fuze_Action;

+++        Flow analysis of subprogram Fuze_Action 
           performed: no errors found.

  39  
  40     function Radar_Action(Val : Word) return radar
  41     is
  42        Act : Radar;
  43     begin
  44        if Val = Radar_Values(Rad_Inactive) then
  45           Act := Rad_inactive;
  46        elsif Val = Radar_Values(Ping) then
  47           Act := ping;
  48        elsif Val = Radar_Values(Sweep) then
  49           Act := Sweep;
  50        else
  51           -- Default
  52           Act := Rad_Inactive;
  53        end if;
  54        return Act;
  55     end radar_Action;

+++        Flow analysis of subprogram Radar_Action 
           performed: no errors found.

  56  
  57     function ir_Action(Val : Word) return Infrared
  58     is
  59        Act : Infrared;
  60     begin
  61        if Val = ir_Values(ir_Inactive) then
  62           Act := ir_inactive;
  63        elsif Val = ir_Values(Ir_stare) then
  64           Act := Ir_stare;
  65        elsif Val = ir_Values(Ir_sweep) then
  66           Act := Ir_sweep;
  67        else
  68           -- Default
  69           Act := ir_Inactive;
  70        end if;
  71        return Act;
  72     end ir_Action;

+++        Flow analysis of subprogram ir_Action performed: 
           no errors found.

  73  
  74  end State_Types;
No summarized warnings



--End of file--------------------------------------------------
