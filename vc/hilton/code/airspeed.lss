           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:39.81

Line
   1  --=head1 NAME
   2  --
   3  -- Airspeed - airspeed simulator code
   4  --
   5  --=head1 REVISION HISTORY
   6  --
   7  -- $Log: airspeed.ads,v $
   8  -- Revision 1.3  2005/01/24 19:19:05  adi
   9  -- Hacked to implement logging
  10  --
  11  -- Revision 1.2  2004/12/19 15:53:40  adi
  12  -- Added POD to airspeed, barometer, bc1553
  13  --
  14  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
  15  -- Added from tarfile
  16  --
  17  --
  18  -- Revision 1.2  2003/08/08 20:45:13  adi
  19  -- Corrected minor annos
  20  --
  21  -- Revision 1.1  2003/08/06 21:02:09  adi
  22  -- Initial revision
  23  --
  24  --
  25  --=cut
  26  with MeasureTypes,Clock,BIT_Machine;
  27  use type MeasureTypes.Meter;
  28  use type MeasureTypes.Meter_Per_Sec;
  29  use type Measuretypes.Cm_Per_Sec_2;
  30  use type Clock.Millisecond;
  31  --# inherit MeasureTypes, Bus, Rt1553,
  32  --#         Clock, Clock_Utils, SystemTypes,
  33  --#         IBIT, Bit_Machine;
  34  package Airspeed
  35    --# own State;
  36    --# initializes State;
  37  is
  38     -- Type renamings for brevity
  39     subtype Meter_Per_Sec is MeasureTypes.Meter_Per_Sec;
  40     subtype Meter_Per_Sec_2 is Measuretypes.Meter_Per_Sec_2;
  41     subtype Cm_Per_Sec_2 is Measuretypes.Cm_Per_Sec_2;
  42  
  43     --=head1 SUBPROGRAMS
  44     --
  45     --=over4
  46  
  47     --=item *
  48     --
  49     procedure Cycle;
  50     --# global in out State;
  51     --#        in out Clock.Time;
  52     --#        in Bus.Outputs;
  53     --#        in out Bus.Inputs;
  54     --# derives State from *, Bus.Outputs &
  55     --#        Bus.Inputs from *, Clock.Time, State &
  56     --#        Clock.Time from *;
  57     --
  58     --Cycle the reading of data from the bus
  59     --and writing of data to the bus
  60     --
  61  
  62     --=item *
  63     --
  64     procedure Set_Airspeed_Profile(Speed : in Meter_Per_Sec;
  65                                    Accel : in cm_Per_Sec_2);
  66     --# global in out State, Clock.Time;
  67     --# derives Clock.Time from * &
  68     --#         State from *, Clock.Time, Speed, Accel;
  69     --
  70     --Set the current airspeed and acceleration
  71     --vertical velocity to C<Speed> and C<Accel> respectively.
  72     --When the system next queries airspeed across the bus,
  73     --the airspeed will be extrapolated from C<Speed> given
  74     --an assumed acceleration of C<Accel>.
  75     --
  76  
  77     --=item *
  78     --
  79     procedure Read_Airspeed(Speed : out Meter_Per_Sec);
  80     --# global in     State;
  81     --#        in out Clock.Time;
  82     --# derives Clock.Time from * &
  83     --#         Speed from State, Clock.Time;
  84     --
  85     --Read the current airspeed as C<Speed>.  This will extrapolate
  86     --from the last-set airspeed at the last-set time by adding
  87     --the appropriate fraction of the last-set acceleration.
  88     --
  89  
  90     --=item *
  91     --
  92     function Read_Accel return Cm_Per_Sec_2;
  93     --# global in State;
  94     --
  95     --Return the last-set acceleration value
  96  
  97     --=item *
  98     --
  99     function Read_BIT_Status return BIT_Machine.Machine;
 100     --# global in State;
 101     --
 102     --Return the current BIT status.
 103  
 104     --=item *
 105     --
 106     procedure Fail_Next_Bit;
 107     --# global in out State;
 108     --# derives State from *;
 109     --
 110     --Cause the next BIT request by the system to fail.
 111     --
 112  
 113     --=item *
 114     --
 115     procedure Init;
 116     --# global out State;
 117     --#        in out Bus.Inputs;
 118     --# derives State from &
 119     --#         Bus.Inputs from *;
 120     --
 121     --Initialise the airspeed simulator to zero values.
 122     --
 123  
 124     --=item *
 125     --
 126     procedure Command;
 127     --# derives;
 128     --
 129     --Test stub
 130     --
 131  
 132     --=back
 133     --
 134     --=cut
 135  end Airspeed;
 136  
 137  --=head1 NOTES
 138  --
 139  --This package provides a simulator of an airspeed measuring device for the
 140  --system.  It allows the testing harness to set a current airspeed and
 141  --constant acceleration, and will extrapolate to calculate new airspeed
 142  --at each future read.  It also allows very basic control over failure of
 143  --built-in test run requests.
 144  --
 145  --=head1 AUTHOR
 146  --
 147  --Adrian J. Hilton.  Home web page at L<http://www.suslik.org/>
 148  --
 149  --=head1 LICENSE
 150  --
 151  --Copyright (C) 2003-2005, Adrian J. Hilton
 152  --
 153  --This program is free software; you can redistribute it and/or modify
 154  --it under the terms of the GNU General Public License as published by
 155  --the Free Software Foundation; either version 2 of the License, or
 156  --(at your option) any later version.
 157  --
 158  --This program is distributed in the hope that it will be useful,
 159  --but WITHOUT ANY WARRANTY; without even the implied warranty of
 160  --MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 161  --GNU General Public License for more details.
 162  --
 163  --You should have received a copy of the GNU General Public License
 164  --along with this program; if not, write to the Free Software
 165  --Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 166  --
 167  --=cut
No summarized warnings



--End of file--------------------------------------------------
