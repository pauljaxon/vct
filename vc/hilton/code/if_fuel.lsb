           *******************************************************
                            Listing of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:40.66

Line
   1  -- MCU interface to the fuel tank, implementation
   2  --
   3  -- $Log: if_fuel.adb,v $
   4  -- Revision 1.1.1.1  2004/01/12 19:29:12  adi
   5  -- Added from tarfile
   6  --
   7  --
   8  -- Revision 1.2  2003/09/10 20:59:21  adi
   9  -- Added get_ibit_state
  10  --
  11  -- Revision 1.1  2003/08/17 12:49:16  adi
  12  -- Initial revision
  13  --
  14  --
  15  with Bc1553, bus;
  16  package body If_Fuel
  17    --# own State is Last_Level, Last_Valid, Ibit_Request;
  18  is
  19     Last_Level : Measuretypes.Kilo := 0;
  20        Last_Valid  : Boolean := False;
  21     Ibit_Request : IBIT.Phase := IBIT.Off;
  22  
  23     Bus_Id : constant Bc1553.Lru_Name := Bc1553.Fuel;
  24  
  25     function Get_Ibit_State return Ibit.Phase
  26       --# global ibit_request;
  27     is begin
  28        return Ibit_Request;
  29     end Get_Ibit_State;

+++        Flow analysis of subprogram Get_IBIT_State 
           performed: no errors found.

  30  
  31     -- Find out the current level and its validity
  32     procedure Get_Level(Level : out measuretypes.kilo;
  33                          Valid  : out Boolean)
  34     --# global in Last_Level, Last_Valid;
  35     --# derives Level from Last_Level, Last_Valid &
  36     --#        Valid from Last_Valid;
  37     is
  38     begin
  39        Valid := Last_Valid;
  40        if Last_Valid then
  41           Level := Last_Level;
  42        else
  43           Level := 0;
  44        end if;
  45     end Get_Level;

+++        Flow analysis of subprogram Get_Level performed: 
           no errors found.

  46  
  47     -- Kick off a fuel IBIT
  48     procedure Ibit_Start
  49       --# global in out Bus.Outputs;
  50       --#        out    Ibit_Request;
  51     --# derives Bus.Outputs from * &
  52     --#         Ibit_Request from ;
  53     is
  54        Code : SystemTypes.Byte;
  55     begin
  56        Ibit_Request := IBIT.Request_Start;
  57        Code := IBIT.Phase_Lookup(Ibit_Request);
  58        -- Send it out on 1R at word 1
  59        BC1553.Write_Word(Data => Code,
  60                          Idx =>  1,
  61                          Subaddress_Idx => 1,
  62                          Dest => Bus_id);
  63     end Ibit_Start;

+++        Flow analysis of subprogram Ibit_Start 
           performed: no errors found.

  64  
  65     -- Stop a fuel IBIT
  66     procedure Ibit_Stop
  67     --# global in out Bus.Outputs;
  68     --#    out Ibit_Request;
  69     --# derives Bus.Outputs from * &
  70     --#         Ibit_Request from ;
  71     is
  72        Code : SystemTypes.Byte;
  73     begin
  74        Ibit_Request := IBIT.Request_Stop;
  75        Code := IBIT.Phase_Lookup(Ibit_Request);
  76        -- Send it out on 1R at word 1
  77        BC1553.Write_Word(Data => Code,
  78                          Idx =>  1,
  79                          Subaddress_Idx => 1,
  80                          Dest => Bus_id);
  81     end Ibit_Stop;

+++        Flow analysis of subprogram Ibit_Stop performed: 
           no errors found.

  82  
  83     -- Poll the bus and update states
  84     procedure Poll
  85     --# global in out Last_Level, Last_Valid, Ibit_Request;
  86     --#        in Bus.Inputs;
  87     --# derives Last_Level, Last_Valid,
  88     --#         Ibit_Request from *, Bus.Inputs;
  89     is
  90        Word : Bus.Word;
  91     begin
  92        -- Check 1T
  93        if BC1553.Is_Valid(Src => Bus_id,
  94                           Subaddress_Idx => 1) and then
  95          BC1553.Is_Fresh(Src => Bus_id,
  96                          Subaddress_Idx => 1) then
  97           Bc1553.Read_Word(Src => Bus_Id,
  98                            Idx => 1,
  99                            Subaddress_Idx => 1,
 100                            Data => Word);
 101           Last_Level := Measuretypes.Kilo(Word);
 102           Last_Valid := True;
 103           -- 1T word 2 - BIT
 104           BC1553.Read_Word(Src => Bus_id,
 105                            Idx => 2,
 106                            Subaddress_Idx => 1,
 107                            Data => Word);
 108           -- Use the standard state machine to transform
 109           -- our IBIT phase
 110           IBIT.State_Machine(Bus_Data => Word,
 111                              Current_Phase => IBIT_Request);
 112        else
 113           -- Nothing to do
 114           null;
 115        end if;
 116     end Poll;

+++        Flow analysis of subprogram Poll performed: no 
           errors found.

 117  
 118     -- Initialise
 119     procedure Init
 120     --# global out Last_Level, Last_Valid, Ibit_Request;
 121     --#        in out Bus.Outputs;
 122     --# derives Last_Level, Last_Valid, Ibit_Request from &
 123     --#         Bus.Outputs from *;
 124     is begin
 125        Last_Level := 0;
 126        Last_Valid := False;
 127        Ibit_Request := IBIT.Off;
 128        BC1553.Set_Message_Valid(Dest => Bus_id,
 129                                 Subaddress_Idx => 1);
 130     end Init;

+++        Flow analysis of subprogram Init performed: no 
           errors found.

 131  
 132     -- Test point
 133     procedure Command is separate;
 134  
 135  end If_Fuel;
No summarized warnings



--End of file--------------------------------------------------
