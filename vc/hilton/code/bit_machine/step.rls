           /*********************************************************/
                           /*Proof Rule Declarations*/
 /*SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331*/
      /*Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 25-NOV-2009 14:04:39.00*/

                         /*procedure bit_machine.Step*/


rule_family step_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

step_rules(1): integer__size >= 0 may_be_deduced.
step_rules(2): integer__first may_be_replaced_by -2147483648.
step_rules(3): integer__last may_be_replaced_by 2147483647.
step_rules(4): integer__base__first may_be_replaced_by -2147483648.
step_rules(5): integer__base__last may_be_replaced_by 2147483647.
step_rules(6): systemtypes__unsigned16__size >= 0 may_be_deduced.
step_rules(7): systemtypes__unsigned16__first may_be_replaced_by 0.
step_rules(8): systemtypes__unsigned16__last may_be_replaced_by 65535.
step_rules(9): systemtypes__unsigned16__base__first may_be_replaced_by -2147483648.
step_rules(10): systemtypes__unsigned16__base__last may_be_replaced_by 2147483647.
step_rules(11): ibit__phase__size >= 0 may_be_deduced.
step_rules(12): ibit__phase__first may_be_replaced_by ibit__off.
step_rules(13): ibit__phase__last may_be_replaced_by ibit__timeout.
step_rules(14): ibit__phase__base__first may_be_replaced_by ibit__off.
step_rules(15): ibit__phase__base__last may_be_replaced_by ibit__timeout.
step_rules(16): ibit__phase__pos(ibit__phase__first) may_be_replaced_by 0.
step_rules(17): ibit__phase__pos(ibit__off) may_be_replaced_by 0.
step_rules(18): ibit__phase__val(0) may_be_replaced_by ibit__off.
step_rules(19): ibit__phase__pos(ibit__request_start) may_be_replaced_by 1.
step_rules(20): ibit__phase__val(1) may_be_replaced_by 
     ibit__request_start.
step_rules(21): ibit__phase__pos(ibit__in_progress) may_be_replaced_by 2.
step_rules(22): ibit__phase__val(2) may_be_replaced_by 
     ibit__in_progress.
step_rules(23): ibit__phase__pos(ibit__request_stop) may_be_replaced_by 3.
step_rules(24): ibit__phase__val(3) may_be_replaced_by 
     ibit__request_stop.
step_rules(25): ibit__phase__pos(ibit__pass) may_be_replaced_by 4.
step_rules(26): ibit__phase__val(4) may_be_replaced_by ibit__pass.
step_rules(27): ibit__phase__pos(ibit__fail) may_be_replaced_by 5.
step_rules(28): ibit__phase__val(5) may_be_replaced_by ibit__fail.
step_rules(29): ibit__phase__pos(ibit__timeout) may_be_replaced_by 6.
step_rules(30): ibit__phase__val(6) may_be_replaced_by 
     ibit__timeout.
step_rules(31): ibit__phase__pos(ibit__phase__last) may_be_replaced_by 6.
step_rules(32): ibit__phase__pos(succ(X)) may_be_replaced_by 
     ibit__phase__pos(X) + 1
     if [X <=ibit__timeout, X <> ibit__timeout].
step_rules(33): ibit__phase__pos(pred(X)) may_be_replaced_by 
     ibit__phase__pos(X) - 1
     if [X >=ibit__off, X <> ibit__off].
step_rules(34): ibit__phase__pos(X) >= 0 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
step_rules(35): ibit__phase__pos(X) <= 6 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
step_rules(36): ibit__phase__val(X) >= ibit__off may_be_deduced_from
     [0 <= X, X <= 6].
step_rules(37): ibit__phase__val(X) <= ibit__timeout may_be_deduced_from
     [0 <= X, X <= 6].
step_rules(38): succ(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X+1)
     if [0 <= X, X < 6].
step_rules(39): pred(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X-1)
     if [0 < X, X <= 6].
step_rules(40): ibit__phase__pos(ibit__phase__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 6].
step_rules(41): ibit__phase__val(ibit__phase__pos(X)) may_be_replaced_by X
     if [ibit__off <= X, X <= ibit__timeout].
step_rules(42): ibit__phase__pos(X) <= ibit__phase__pos(Y) & X <= Y are_interchangeable 
     if [ibit__off <= X, X <= ibit__timeout, ibit__off <= Y, Y <= 
     ibit__timeout].
step_rules(43): ibit__phase__val(X) <= ibit__phase__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 6, 0 <= Y, Y <= 6].
step_rules(44): machine__size >= 0 may_be_deduced.
step_rules(45): A = B may_be_deduced_from
     [goal(checktype(A,machine)),
      goal(checktype(B,machine)),
      fld_current_phase(A) = fld_current_phase(B),
      fld_ticks(A) = fld_ticks(B),
      fld_fail_bit(A) = fld_fail_bit(B),
      fld_ticks_to_complete(A) = fld_ticks_to_complete(B)].
