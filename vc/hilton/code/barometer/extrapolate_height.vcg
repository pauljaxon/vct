           *******************************************************
                       Semantic Analysis of SPARK Text
 SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331
      Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.
           *******************************************************


                        DATE : 25-NOV-2009 14:04:39.09

                   procedure barometer.Extrapolate_Height




For path(s) from start to run-time check associated with statement of line 58:

procedure_extrapolate_height_1.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
        ->
C1:    time_now__1 >= clock__millisecond__first .
C2:    time_now__1 <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 62:

procedure_extrapolate_height_2.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not time_valid__1 .
        ->
C1:    0 >= pos_meter__first .
C2:    0 <= pos_meter__last .
 

For path(s) from start to run-time check associated with statement of line 65:

procedure_extrapolate_height_3.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
        ->
C1:    time_now__1 >= clock__millisecond__first .
C2:    time_now__1 <= clock__millisecond__last .
C3:    last_time >= clock__millisecond__first .
C4:    last_time <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 65:

procedure_extrapolate_height_4.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
        ->
C1:    clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
C2:    clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 67:

procedure_extrapolate_height_5.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_velocity < 0 .
        ->
C1:     -last_velocity >= clock__millisecond__first .
C2:     -last_velocity <= clock__millisecond__last .
C3:     -last_velocity >= clock__millisecond__first .
C4:     -last_velocity <= clock__millisecond__last .
C5:     -last_velocity >= measuretypes__meter_per_sec__base__first .
C6:     -last_velocity <= measuretypes__meter_per_sec__base__last .
 

For path(s) from start to run-time check associated with statement of line 68:

procedure_extrapolate_height_6.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_velocity < 0 .
H26:    -last_velocity >= clock__millisecond__first .
H27:    -last_velocity <= clock__millisecond__last .
H28:    -last_velocity >= clock__millisecond__first .
H29:    -last_velocity <= clock__millisecond__last .
H30:    -last_velocity >= measuretypes__meter_per_sec__base__first .
H31:    -last_velocity <= measuretypes__meter_per_sec__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_velocity >= clock__millisecond__first .
H35:    -last_velocity <= clock__millisecond__last .
        ->
C1:     -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
C2:     -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
C3:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= meter__first .
C4:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= meter__last .
C5:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= 
           clock__millisecond__base__first .
C6:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= 
           clock__millisecond__base__last .
C7:    1000 <> 0 .
C8:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) >= clock__millisecond__base__first .
C9:    ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) <= clock__millisecond__base__last .
 

For path(s) from start to run-time check associated with statement of line 70:

procedure_extrapolate_height_7.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_velocity < 0) .
        ->
C1:    last_velocity >= clock__millisecond__first .
C2:    last_velocity <= clock__millisecond__last .
C3:    last_velocity >= clock__millisecond__first .
C4:    last_velocity <= clock__millisecond__last .
 

For path(s) from start to run-time check associated with statement of line 71:

procedure_extrapolate_height_8.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_velocity < 0) .
H26:   last_velocity >= clock__millisecond__first .
H27:   last_velocity <= clock__millisecond__last .
H28:   last_velocity >= clock__millisecond__first .
H29:   last_velocity <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_velocity >= clock__millisecond__first .
H33:   last_velocity <= clock__millisecond__last .
        ->
C1:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
C2:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
C3:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
C4:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
C5:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= clock__millisecond__base__first .
C6:    last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= clock__millisecond__base__last .
C7:    1000 <> 0 .
C8:    last_velocity * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
C9:    last_velocity * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
 

For path(s) from start to run-time check associated with statement of line 73:

procedure_extrapolate_height_9.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_velocity < 0 .
H26:    -last_velocity >= clock__millisecond__first .
H27:    -last_velocity <= clock__millisecond__last .
H28:    -last_velocity >= clock__millisecond__first .
H29:    -last_velocity <= clock__millisecond__last .
H30:    -last_velocity >= measuretypes__meter_per_sec__base__first .
H31:    -last_velocity <= measuretypes__meter_per_sec__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_velocity >= clock__millisecond__first .
H35:    -last_velocity <= clock__millisecond__last .
H36:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H37:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
H38:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= meter__first .
H39:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= meter__last .
H40:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= 
           clock__millisecond__base__first .
H41:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= 
           clock__millisecond__base__last .
H42:   1000 <> 0 .
H43:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) >= clock__millisecond__base__first .
H44:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) <= clock__millisecond__base__last .
H45:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H46:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
        ->
C1:    last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
C2:    last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
 

procedure_extrapolate_height_10.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_velocity < 0) .
H26:   last_velocity >= clock__millisecond__first .
H27:   last_velocity <= clock__millisecond__last .
H28:   last_velocity >= clock__millisecond__first .
H29:   last_velocity <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_velocity >= clock__millisecond__first .
H33:   last_velocity <= clock__millisecond__last .
H34:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H35:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H36:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H37:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H38:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= clock__millisecond__base__first .
H39:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= clock__millisecond__base__last .
H40:   1000 <> 0 .
H41:   last_velocity * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
H42:   last_velocity * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
H43:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H44:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
        ->
C1:    last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
C2:    last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
 

For path(s) from start to run-time check associated with statement of line 75:

procedure_extrapolate_height_11.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_velocity < 0 .
H26:    -last_velocity >= clock__millisecond__first .
H27:    -last_velocity <= clock__millisecond__last .
H28:    -last_velocity >= clock__millisecond__first .
H29:    -last_velocity <= clock__millisecond__last .
H30:    -last_velocity >= measuretypes__meter_per_sec__base__first .
H31:    -last_velocity <= measuretypes__meter_per_sec__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_velocity >= clock__millisecond__first .
H35:    -last_velocity <= clock__millisecond__last .
H36:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H37:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
H38:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= meter__first .
H39:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= meter__last .
H40:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= 
           clock__millisecond__base__first .
H41:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= 
           clock__millisecond__base__last .
H42:   1000 <> 0 .
H43:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) >= clock__millisecond__base__first .
H44:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) <= clock__millisecond__base__last .
H45:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H46:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
H47:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
H48:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
H49:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
H50:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
H51:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) < 
           0 .
        ->
C1:    0 >= pos_meter__first .
C2:    0 <= pos_meter__last .
 

procedure_extrapolate_height_12.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_velocity < 0) .
H26:   last_velocity >= clock__millisecond__first .
H27:   last_velocity <= clock__millisecond__last .
H28:   last_velocity >= clock__millisecond__first .
H29:   last_velocity <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_velocity >= clock__millisecond__first .
H33:   last_velocity <= clock__millisecond__last .
H34:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H35:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H36:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H37:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H38:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= clock__millisecond__base__first .
H39:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= clock__millisecond__base__last .
H40:   1000 <> 0 .
H41:   last_velocity * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
H42:   last_velocity * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
H43:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H44:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H45:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
H46:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
H47:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
H48:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
H49:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 < 0 .
        ->
C1:    0 >= pos_meter__first .
C2:    0 <= pos_meter__last .
 

For path(s) from start to run-time check associated with statement of line 77:

procedure_extrapolate_height_13.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   last_velocity < 0 .
H26:    -last_velocity >= clock__millisecond__first .
H27:    -last_velocity <= clock__millisecond__last .
H28:    -last_velocity >= clock__millisecond__first .
H29:    -last_velocity <= clock__millisecond__last .
H30:    -last_velocity >= measuretypes__meter_per_sec__base__first .
H31:    -last_velocity <= measuretypes__meter_per_sec__base__last .
H32:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H33:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H34:    -last_velocity >= clock__millisecond__first .
H35:    -last_velocity <= clock__millisecond__last .
H36:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H37:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
H38:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= meter__first .
H39:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= meter__last .
H40:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 >= 
           clock__millisecond__base__first .
H41:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000 <= 
           clock__millisecond__base__last .
H42:   1000 <> 0 .
H43:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) >= clock__millisecond__base__first .
H44:   ( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) <= clock__millisecond__base__last .
H45:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) >= meter__first .
H46:    -(( -last_velocity) * clock_utils__delta_time(
           last_time, time_now__1) div 1000) <= meter__last .
H47:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
H48:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
H49:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
H50:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
H51:   not (last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) < 
           0) .
H52:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           meter__first .
H53:   last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           meter__last .
        ->
C1:    last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) >= 
           pos_meter__first .
C2:    last_altitude + ( -(( -last_velocity) * 
           clock_utils__delta_time(last_time, time_now__1) div 1000)) <= 
           pos_meter__last .
 

procedure_extrapolate_height_14.
H1:    true .
H2:    last_altitude >= meter__first .
H3:    last_altitude <= meter__last .
H4:    last_velocity >= meter_per_sec__first .
H5:    last_velocity <= meter_per_sec__last .
H6:    last_time >= clock__millisecond__first .
H7:    last_time <= clock__millisecond__last .
H8:    time_now__1 >= clock__millisecond__first .
H9:    time_now__1 <= clock__millisecond__last .
H10:   true .
H11:   time_now__1 >= clock__millisecond__first .
H12:   time_now__1 <= clock__millisecond__last .
H13:   true .
H14:   not (not time_valid__1) .
H15:   time_now__1 >= clock__millisecond__first .
H16:   time_now__1 <= clock__millisecond__last .
H17:   time_now__1 >= clock__millisecond__first .
H18:   time_now__1 <= clock__millisecond__last .
H19:   last_time >= clock__millisecond__first .
H20:   last_time <= clock__millisecond__last .
H21:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H22:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H23:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H24:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H25:   not (last_velocity < 0) .
H26:   last_velocity >= clock__millisecond__first .
H27:   last_velocity <= clock__millisecond__last .
H28:   last_velocity >= clock__millisecond__first .
H29:   last_velocity <= clock__millisecond__last .
H30:   clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__first .
H31:   clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__last .
H32:   last_velocity >= clock__millisecond__first .
H33:   last_velocity <= clock__millisecond__last .
H34:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H35:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H36:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H37:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H38:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= clock__millisecond__base__first .
H39:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= clock__millisecond__base__last .
H40:   1000 <> 0 .
H41:   last_velocity * clock_utils__delta_time(last_time, time_now__1) >= 
           clock__millisecond__base__first .
H42:   last_velocity * clock_utils__delta_time(last_time, time_now__1) <= 
           clock__millisecond__base__last .
H43:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 >= meter__first .
H44:   last_velocity * clock_utils__delta_time(last_time, time_now__1) div 
           1000 <= meter__last .
H45:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
H46:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
H47:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
H48:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
H49:   not (last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 < 0) .
H50:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           meter__first .
H51:   last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           meter__last .
        ->
C1:    last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 >= 
           pos_meter__first .
C2:    last_altitude + last_velocity * 
           clock_utils__delta_time(last_time, time_now__1) div 1000 <= 
           pos_meter__last .
 

For path(s) from start to finish:

procedure_extrapolate_height_15.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_height_16.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_height_17.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_height_18.
*** true .          /* trivially true VC removed by Examiner */


procedure_extrapolate_height_19.
*** true .          /* trivially true VC removed by Examiner */


