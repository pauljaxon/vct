           /*********************************************************/
                           /*Proof Rule Declarations*/
 /*SPARK Examiner Pro Edition, Version 8.1.4, Build Date 20090925, Build 14331*/
      /*Copyright (C) 2009 Praxis High Integrity Systems Ltd., Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 25-NOV-2009 14:04:40.95*/

                           /*procedure if_fuze.Init*/


rule_family init_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

init_rules(1): bus_id may_be_replaced_by bc1553__fuze.
init_rules(2): state_types__fuze__size >= 0 may_be_deduced.
init_rules(3): state_types__fuze__first may_be_replaced_by state_types__unarmed.
init_rules(4): state_types__fuze__last may_be_replaced_by state_types__timed_out.
init_rules(5): state_types__fuze__base__first may_be_replaced_by state_types__unarmed.
init_rules(6): state_types__fuze__base__last may_be_replaced_by state_types__timed_out.
init_rules(7): state_types__fuze__pos(state_types__fuze__first) may_be_replaced_by 0.
init_rules(8): state_types__fuze__pos(state_types__unarmed) may_be_replaced_by 0.
init_rules(9): state_types__fuze__val(0) may_be_replaced_by 
     state_types__unarmed.
init_rules(10): state_types__fuze__pos(state_types__arming) may_be_replaced_by 1.
init_rules(11): state_types__fuze__val(1) may_be_replaced_by 
     state_types__arming.
init_rules(12): state_types__fuze__pos(state_types__live) may_be_replaced_by 2.
init_rules(13): state_types__fuze__val(2) may_be_replaced_by 
     state_types__live.
init_rules(14): state_types__fuze__pos(state_types__triggering) may_be_replaced_by 3.
init_rules(15): state_types__fuze__val(3) may_be_replaced_by 
     state_types__triggering.
init_rules(16): state_types__fuze__pos(state_types__timed_out) may_be_replaced_by 4.
init_rules(17): state_types__fuze__val(4) may_be_replaced_by 
     state_types__timed_out.
init_rules(18): state_types__fuze__pos(state_types__fuze__last) may_be_replaced_by 4.
init_rules(19): state_types__fuze__pos(succ(X)) may_be_replaced_by 
     state_types__fuze__pos(X) + 1
     if [X <=state_types__timed_out, X <> state_types__timed_out].
init_rules(20): state_types__fuze__pos(pred(X)) may_be_replaced_by 
     state_types__fuze__pos(X) - 1
     if [X >=state_types__unarmed, X <> state_types__unarmed].
init_rules(21): state_types__fuze__pos(X) >= 0 may_be_deduced_from
     [state_types__unarmed <= X, X <= state_types__timed_out].
init_rules(22): state_types__fuze__pos(X) <= 4 may_be_deduced_from
     [state_types__unarmed <= X, X <= state_types__timed_out].
init_rules(23): state_types__fuze__val(X) >= state_types__unarmed may_be_deduced_from
     [0 <= X, X <= 4].
init_rules(24): state_types__fuze__val(X) <= 
     state_types__timed_out may_be_deduced_from
     [0 <= X, X <= 4].
init_rules(25): succ(state_types__fuze__val(X)) may_be_replaced_by 
     state_types__fuze__val(X+1)
     if [0 <= X, X < 4].
init_rules(26): pred(state_types__fuze__val(X)) may_be_replaced_by 
     state_types__fuze__val(X-1)
     if [0 < X, X <= 4].
init_rules(27): state_types__fuze__pos(state_types__fuze__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 4].
init_rules(28): state_types__fuze__val(state_types__fuze__pos(X)) may_be_replaced_by X
     if [state_types__unarmed <= X, X <= state_types__timed_out].
init_rules(29): state_types__fuze__pos(X) <= state_types__fuze__pos(Y) & X <= Y are_interchangeable 
     if [state_types__unarmed <= X, X <= state_types__timed_out, 
     state_types__unarmed <= Y, Y <= state_types__timed_out].
init_rules(30): state_types__fuze__val(X) <= state_types__fuze__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 4, 0 <= Y, Y <= 4].
init_rules(31): bus__all_msg_index__size >= 0 may_be_deduced.
init_rules(32): bus__all_msg_index__first may_be_replaced_by 0.
init_rules(33): bus__all_msg_index__last may_be_replaced_by 63.
init_rules(34): bus__all_msg_index__base__first may_be_replaced_by -32768.
init_rules(35): bus__all_msg_index__base__last may_be_replaced_by 32767.
init_rules(36): bus__lru_subaddress_index__size >= 0 may_be_deduced.
init_rules(37): bus__lru_subaddress_index__first may_be_replaced_by 1.
init_rules(38): bus__lru_subaddress_index__last may_be_replaced_by 8.
init_rules(39): bus__lru_subaddress_index__base__first may_be_replaced_by -32768.
init_rules(40): bus__lru_subaddress_index__base__last may_be_replaced_by 32767.
init_rules(41): bc1553__lru_name__size >= 0 may_be_deduced.
init_rules(42): bc1553__lru_name__first may_be_replaced_by bc1553__barometer.
init_rules(43): bc1553__lru_name__last may_be_replaced_by bc1553__warhead.
init_rules(44): bc1553__lru_name__base__first may_be_replaced_by bc1553__barometer.
init_rules(45): bc1553__lru_name__base__last may_be_replaced_by bc1553__warhead.
init_rules(46): bc1553__lru_name__pos(bc1553__lru_name__first) may_be_replaced_by 0.
init_rules(47): bc1553__lru_name__pos(bc1553__barometer) may_be_replaced_by 0.
init_rules(48): bc1553__lru_name__val(0) may_be_replaced_by 
     bc1553__barometer.
init_rules(49): bc1553__lru_name__pos(bc1553__asi) may_be_replaced_by 1.
init_rules(50): bc1553__lru_name__val(1) may_be_replaced_by 
     bc1553__asi.
init_rules(51): bc1553__lru_name__pos(bc1553__ins) may_be_replaced_by 2.
init_rules(52): bc1553__lru_name__val(2) may_be_replaced_by 
     bc1553__ins.
init_rules(53): bc1553__lru_name__pos(bc1553__compass) may_be_replaced_by 3.
init_rules(54): bc1553__lru_name__val(3) may_be_replaced_by 
     bc1553__compass.
init_rules(55): bc1553__lru_name__pos(bc1553__fuel) may_be_replaced_by 4.
init_rules(56): bc1553__lru_name__val(4) may_be_replaced_by 
     bc1553__fuel.
init_rules(57): bc1553__lru_name__pos(bc1553__fuze) may_be_replaced_by 5.
init_rules(58): bc1553__lru_name__val(5) may_be_replaced_by 
     bc1553__fuze.
init_rules(59): bc1553__lru_name__pos(bc1553__radar) may_be_replaced_by 6.
init_rules(60): bc1553__lru_name__val(6) may_be_replaced_by 
     bc1553__radar.
init_rules(61): bc1553__lru_name__pos(bc1553__infrared) may_be_replaced_by 7.
init_rules(62): bc1553__lru_name__val(7) may_be_replaced_by 
     bc1553__infrared.
init_rules(63): bc1553__lru_name__pos(bc1553__fins) may_be_replaced_by 8.
init_rules(64): bc1553__lru_name__val(8) may_be_replaced_by 
     bc1553__fins.
init_rules(65): bc1553__lru_name__pos(bc1553__motor) may_be_replaced_by 9.
init_rules(66): bc1553__lru_name__val(9) may_be_replaced_by 
     bc1553__motor.
init_rules(67): bc1553__lru_name__pos(bc1553__destruct) may_be_replaced_by 10.
init_rules(68): bc1553__lru_name__val(10) may_be_replaced_by 
     bc1553__destruct.
init_rules(69): bc1553__lru_name__pos(bc1553__warhead) may_be_replaced_by 11.
init_rules(70): bc1553__lru_name__val(11) may_be_replaced_by 
     bc1553__warhead.
init_rules(71): bc1553__lru_name__pos(bc1553__lru_name__last) may_be_replaced_by 11.
init_rules(72): bc1553__lru_name__pos(succ(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) + 1
     if [X <=bc1553__warhead, X <> bc1553__warhead].
init_rules(73): bc1553__lru_name__pos(pred(X)) may_be_replaced_by 
     bc1553__lru_name__pos(X) - 1
     if [X >=bc1553__barometer, X <> bc1553__barometer].
init_rules(74): bc1553__lru_name__pos(X) >= 0 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
init_rules(75): bc1553__lru_name__pos(X) <= 11 may_be_deduced_from
     [bc1553__barometer <= X, X <= bc1553__warhead].
init_rules(76): bc1553__lru_name__val(X) >= bc1553__barometer may_be_deduced_from
     [0 <= X, X <= 11].
init_rules(77): bc1553__lru_name__val(X) <= bc1553__warhead may_be_deduced_from
     [0 <= X, X <= 11].
init_rules(78): succ(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X+1)
     if [0 <= X, X < 11].
init_rules(79): pred(bc1553__lru_name__val(X)) may_be_replaced_by 
     bc1553__lru_name__val(X-1)
     if [0 < X, X <= 11].
init_rules(80): bc1553__lru_name__pos(bc1553__lru_name__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 11].
init_rules(81): bc1553__lru_name__val(bc1553__lru_name__pos(X)) may_be_replaced_by X
     if [bc1553__barometer <= X, X <= bc1553__warhead].
init_rules(82): bc1553__lru_name__pos(X) <= bc1553__lru_name__pos(Y) & X <= Y are_interchangeable 
     if [bc1553__barometer <= X, X <= bc1553__warhead, 
     bc1553__barometer <= Y, Y <= bc1553__warhead].
init_rules(83): bc1553__lru_name__val(X) <= bc1553__lru_name__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 11, 0 <= Y, Y <= 11].
init_rules(84): ibit__phase__size >= 0 may_be_deduced.
init_rules(85): ibit__phase__first may_be_replaced_by ibit__off.
init_rules(86): ibit__phase__last may_be_replaced_by ibit__timeout.
init_rules(87): ibit__phase__base__first may_be_replaced_by ibit__off.
init_rules(88): ibit__phase__base__last may_be_replaced_by ibit__timeout.
init_rules(89): ibit__phase__pos(ibit__phase__first) may_be_replaced_by 0.
init_rules(90): ibit__phase__pos(ibit__off) may_be_replaced_by 0.
init_rules(91): ibit__phase__val(0) may_be_replaced_by ibit__off.
init_rules(92): ibit__phase__pos(ibit__request_start) may_be_replaced_by 1.
init_rules(93): ibit__phase__val(1) may_be_replaced_by 
     ibit__request_start.
init_rules(94): ibit__phase__pos(ibit__in_progress) may_be_replaced_by 2.
init_rules(95): ibit__phase__val(2) may_be_replaced_by 
     ibit__in_progress.
init_rules(96): ibit__phase__pos(ibit__request_stop) may_be_replaced_by 3.
init_rules(97): ibit__phase__val(3) may_be_replaced_by 
     ibit__request_stop.
init_rules(98): ibit__phase__pos(ibit__pass) may_be_replaced_by 4.
init_rules(99): ibit__phase__val(4) may_be_replaced_by ibit__pass.
init_rules(100): ibit__phase__pos(ibit__fail) may_be_replaced_by 5.
init_rules(101): ibit__phase__val(5) may_be_replaced_by 
     ibit__fail.
init_rules(102): ibit__phase__pos(ibit__timeout) may_be_replaced_by 6.
init_rules(103): ibit__phase__val(6) may_be_replaced_by 
     ibit__timeout.
init_rules(104): ibit__phase__pos(ibit__phase__last) may_be_replaced_by 6.
init_rules(105): ibit__phase__pos(succ(X)) may_be_replaced_by 
     ibit__phase__pos(X) + 1
     if [X <=ibit__timeout, X <> ibit__timeout].
init_rules(106): ibit__phase__pos(pred(X)) may_be_replaced_by 
     ibit__phase__pos(X) - 1
     if [X >=ibit__off, X <> ibit__off].
init_rules(107): ibit__phase__pos(X) >= 0 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
init_rules(108): ibit__phase__pos(X) <= 6 may_be_deduced_from
     [ibit__off <= X, X <= ibit__timeout].
init_rules(109): ibit__phase__val(X) >= ibit__off may_be_deduced_from
     [0 <= X, X <= 6].
init_rules(110): ibit__phase__val(X) <= ibit__timeout may_be_deduced_from
     [0 <= X, X <= 6].
init_rules(111): succ(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X+1)
     if [0 <= X, X < 6].
init_rules(112): pred(ibit__phase__val(X)) may_be_replaced_by 
     ibit__phase__val(X-1)
     if [0 < X, X <= 6].
init_rules(113): ibit__phase__pos(ibit__phase__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 6].
init_rules(114): ibit__phase__val(ibit__phase__pos(X)) may_be_replaced_by X
     if [ibit__off <= X, X <= ibit__timeout].
init_rules(115): ibit__phase__pos(X) <= ibit__phase__pos(Y) & X <= Y are_interchangeable 
     if [ibit__off <= X, X <= ibit__timeout, ibit__off <= Y, Y <= 
     ibit__timeout].
init_rules(116): ibit__phase__val(X) <= ibit__phase__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 6, 0 <= Y, Y <= 6].
